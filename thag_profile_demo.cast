{"version":3,"term":{"cols":203,"rows":30,"type":"xterm-256color","version":"WezTerm 20240203-110809-5046fc22","theme":{"fg":"#504945","bg":"#f9f5d7","palette":"#f9f5d7:#9d0006:#79740e:#b57614:#076678:#8f3f71:#427b58:#504945:#bdae93:#9d0006:#79740e:#b57614:#076678:#8f3f71:#427b58:#282828"}},"timestamp":1760428070,"idle_time_limit":2.0,"env":{"SHELL":"/bin/zsh"}}
[0.230893, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007\u001b]1337;ShellIntegrationVersion=14;shell=zsh\u0007"]
[0.056868, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                          \r \r\u001b]133;D;0\u0007"]
[0.020432, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007"]
[0.017782, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b]133;A\u0007$ \u001b]133;B\u0007\u001b[K\u001b[?2004h"]
[0.974221, "i", "\u001b[A"]
[0.001285, "o", "thag_instrument 2021 < demo/document_pipeline.rs > demo/document_pipeline_instr.rs"]
[1.646248, "i", "\r"]
[0.000269, "o", "\u001b[?2004l\r\r\n"]
[0.000922, "o", "\u001b]133;C;\u0007"]
[0.06463, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                          \r \r"]
[0.000076, "o", "\u001b]133;D;0\u0007"]
[0.027057, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007"]
[0.02489, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b]133;A\u0007$ \u001b]133;B\u0007\u001b[K\u001b[?2004h"]
[1.81361, "i", "\u001b[A"]
[0.000426, "o", "thag_instrument 2021 < demo/document_pipeline.rs > demo/document_pipeline_instr.rs"]
[1.372013, "i", "\u001bb"]
[0.003058, "o", "\u001b[31D"]
[1.328508, "i", ""]
[0.000271, "o", "\b\u001b[P\u001b[31C \u001b[32D"]
[0.365198, "i", ""]
[0.000346, "o", "\b\u001b[P\u001b[31C \u001b[32D"]
[1.03497, "i", "\u001bb"]
[0.000342, "o", "\u001b[26D"]
[1.380173, "i", "\u001b[D"]
[0.000361, "o", "\b"]
[1.341059, "i", "\u0017"]
[0.000414, "o", "\b\u001b[P\u001b[58C \u001b[59D"]
[0.255352, "i", "\u0017"]
[0.000353, "o", "\b\b\b\b\b\u001b[5P\u001b[58C     \u001b[63D"]
[0.492585, "i", "\u0017"]
[0.000296, "o", "\u001b[16D\u001b[16P\u001b[58C                \u001b[74D"]
[1.896771, "i", "v"]
[0.000342, "o", "v\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.159457, "i", "i"]
[0.000448, "o", "\bvi\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.264626, "i", "m"]
[0.000343, "o", "m\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.286336, "i", "d"]
[0.000327, "o", "d\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.122715, "i", "i"]
[0.00043, "o", "i\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.220827, "i", "f"]
[0.000324, "o", "f\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.141395, "i", "f"]
[0.000339, "o", "f\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[1.060721, "i", " "]
[0.000291, "o", "\u001b[1C\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.377066, "i", "-"]
[0.000244, "o", "-\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.63992, "i", "n"]
[0.000411, "o", "n\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.898481, "i", " "]
[0.000283, "o", "\u001b[1C\u001b[25P\u001b[23C.rs demo/document_pipeline_instr.rs\u001b[58D"]
[0.45439, "i", "\r"]
[0.000601, "o", "\u001b[?2004l\r\r\n"]
[0.000635, "o", "\u001b]133;C;\u0007"]
[0.087423, "o", "2 files to edit\r\n"]
[0.024618, "o", "\u001b[?1049h\u001b[>4;2m\u001b[?1h\u001b=\u001b[?2004h\u001b[?1004h"]
[0.000315, "o", "\u001b[1;30r\u001b[?12h\u001b[?12l\u001b[22;2t\u001b[22;1t"]
[0.003999, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[?25l\u001b[30;1H\"demo/document_pipeline.rs\""]
[0.0039, "o", " 275L, 7920B"]
[0.001957, "o", "\u001b[30;24H_instr.rs\"\u001b[30;35H\u001b[K"]
[0.000187, "o", "\u001b[30;35H289L, 8153B"]
[0.126728, "o", "\u001b[2;1Hâ–½\u001b[6n\u001b[2;1H  \u001b[3;1H\u001bPzz\u001b\\\u001b[0%m\u001b[6n\u001b[3;1H           \u001b[1;1H"]
[0.000111, "o", "\u001b[>c\u001b]10;?\u0007\u001b]11;?\u0007"]
[0.002825, "o", "\u001b[1;1H\u001b[34m\u001b[48;5;248m+ \u001b[m\u001b[34m\u001b[48;5;248m+--  2 lines: use futures::future::join_all;-------------------------------------------------------\u001b[m\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[muse std::fs::File;                                                                                 \u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[muse std::io::{self, BufRead, BufReader, Write};                                                    \u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[muse std::path::Path;\u001b[79C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[muse std::time::{Duration, Instant};\u001b[64C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[muse tokio::time::sleep;\u001b[76C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[99C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m/// Test async program (uninstrumented base / control version) for `"]
[0.000016, "o", "thag_profiler` testing.\u001b[8C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m/// See also `demo/document_pipeline_profile.rs` and `demo/document_pipeline_profile_minimal.rs`.  \u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m///\u001b[96C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m//# Purpose: Test auto-instrumentation using `thag_profiler`'s `thag-instrument` resulting in `demo\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m//# Categories: prototype, testing\u001b[65C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[mstruct Document {\u001b[82C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m+ \u001b[m\u001b[34m\u001b[48;5;248m+--  2 lines: id: usize,---------------------------------------------------------------------------\u001b[m\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m    word_count: HashMap<String, usize>,\u001b[60C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m    sentiment_score: f64,\u001b[74C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m    is_processed: bool,\u001b[76C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m}\u001b[98C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[99C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[mimpl Document {\u001b[84C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  "]
[0.000265, "i", "\u001b[2;2R\u001b[3;1R\u001b[>1;277;0c\u001b]10;rgb:5050/4949/4545\u001b\\"]
[0.000028, "i", "\u001b]11;rgb:f9f9/f5f5/d7d7\u001b\\"]
[0.000022, "o", "\u001b[m\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m    fn new(id: usize, content: String) -> Self {\u001b[51C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[8CDocument {\u001b[81C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Cid,\u001b[84C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Ccontent,\u001b[79C\u001b[7m|\u001b[m\r\n\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Cword_count: HashMap::new(),\u001b[60C\u001b[7m|\u001b[m\r\n\u001b[1m\u001b[7mdemo/document_pipeline.rs                                                                             \u001b[m\u001b[1;103H\u001b[34m\u001b[48;5;248m+ \u001b[m\u001b[34m\u001b[48;5;248m+--  2 lines: use futures::future::join_all;-------------------------------------------------------\u001b[m\u001b[2;103H\u001b[34m\u001b[48;5;248m  \u001b[muse std::fs::File;\u001b[2;123H\u001b[K\u001b[3;103H\u001b[34m\u001b[48;5;248m  \u001b[muse std::io::{self, BufRead, BufReader, Write};\u001b[3;152H\u001b[K\u001b[4;103H\u001b[34m\u001b[48;5;248m  \u001b[muse std::path::Path;\u001b[5;103H\u001b[34m\u001b[48;5;248m  \u001b[muse std::time::{Duration, Instant};\u001b[6;103H\u001b[34m\u001b[48;5;248m  \u001b[muse tokio::time::sleep;\u001b[7;103H\u001b[34m\u001b[48;5;248m  \u001b["]
[0.000009, "o", "8;103H  \u001b[m\u001b[48;5;81muse thag_profiler::{enable_profiling, end, profile, profiled};                                     \u001b[m\u001b[9;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[48;5;81m                                                                                                   \u001b[m\u001b[10;103H\u001b[34m\u001b[48;5;248m  \u001b[m/// Test async program (uninstrumented base / control version) for `thag_profiler` testing.\u001b[11;103H\u001b[34m\u001b[48;5;248m  \u001b[m/// See also `demo/document_pipeline_profile.rs` and `demo/document_pipeline_profile_minimal.rs`.\u001b[12;103H\u001b[34m\u001b[48;5;248m  \u001b[m///\u001b[13;103H\u001b[34m\u001b[48;5;248m  \u001b[m//# Purpose: Test auto-instrumentation using `thag_profiler`'s `thag-instrument` resulting in `demo\u001b[14;103H\u001b[34m\u001b[48;5;248m  \u001b[m//# Categories: prototype, testing\u001b[15;103H\u001b[34m\u001b[48;5;248m  \u001b[mstruct Document {\u001b[16;103H\u001b[34m\u001b[48;5;248m+ \u001b[m\u001b[34m\u001b[48;5;248m+--  2 lines: id: usize,---------------------------------------------------------------------------\u001b[m\u001b[17;103H\u001b[34m"]
[0.000205, "o", "\u001b[48;5;248m  \u001b[m    word_count: HashMap<String, usize>,\u001b[18;103H\u001b[34m\u001b[48;5;248m  \u001b[m    sentiment_score: f64,\u001b[19;103H\u001b[34m\u001b[48;5;248m  \u001b[m    is_processed: bool,\u001b[20;103H\u001b[34m\u001b[48;5;248m  \u001b[m}\u001b[21;103H\u001b[34m\u001b[48;5;248m  \u001b[22;103H  \u001b[mimpl Document {\u001b[23;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[48;5;81m    #[profiled]                                                                                    \u001b[m\u001b[24;103H\u001b[34m\u001b[48;5;248m  \u001b[m    fn new(id: usize, content: String) -> Self {\u001b[25;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[8CDocument {\u001b[26;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Cid,\u001b[27;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Ccontent,\u001b[28;103H\u001b[34m\u001b[48;5;248m  \u001b[m\u001b[12Cword_count: HashMap::new(),\u001b[29;103H\u001b[7mdemo/document_pipeline_instr.rs                                                                      \u001b[1;3H\u001b[?25h\u001b[?4m"]
[0.000128, "o", "\u001bP+q436f\u001b\\\u001bP+q6b75\u001b\\\u001bP+q6b64\u001b\\\u001bP+q6b72\u001b\\\u001bP+q6b6c\u001b\\\u001bP+q2332\u001b\\\u001bP+q2334\u001b\\\u001bP+q2569\u001b\\\u001bP+q2a37\u001b\\\u001bP+q6b31\u001b\\\u001b[?12$p"]
[0.006099, "i", "\u001bP1+r436F=323536\u001b\\\u001bP1+r6B75=1B4F41\u001b\\"]
[0.000114, "i", "\u001bP1+r6B64=1B4F42\u001b\\\u001bP1+r6B72=1B4F43\u001b\\\u001bP1+r6B6C=1B4F44\u001b\\\u001bP1+r2332=1B5B313B3248\u001b\\\u001bP1+r2334=1B5B313B3244\u001b\\\u001bP1+r2569=1B5B313B3243\u001b\\"]
[0.00004, "i", "\u001bP1+r2A37=1B5B313B3246\u001b\\\u001bP1+r6B31=1B4F50\u001b\\\u001b[?12;2$y"]
[0.000059, "o", "\u001bP+q6b32\u001b\\\u001bP+q6b33\u001b\\\u001bP+q6b34\u001b\\"]
[0.000009, "o", "\u001bP+q6b35\u001b\\\u001bP+q6b36\u001b\\"]
[0.000042, "o", "\u001bP+q6b37\u001b\\\u001bP+q6b38\u001b\\\u001bP+q6b39\u001b\\\u001bP+q6b3b\u001b\\\u001bP+q4631\u001b\\"]
[0.003802, "i", "\u001bP0+r6B32\u001b\\\u001bP0+r6B33\u001b\\\u001bP0+r6B34\u001b\\\u001bP0+r6B35\u001b\\\u001bP0+r6B36\u001b\\\u001bP0+r6B37\u001b\\\u001bP0+r6B38\u001b\\\u001bP0+r6B39\u001b\\\u001bP0+r6B3B\u001b\\\u001bP0+r4631\u001b\\"]
[0.000056, "o", "\u001bP+q4632\u001b\\\u001bP+q2531\u001b\\\u001bP+q2638\u001b\\\u001bP+q6b62\u001b\\\u001bP+q6b49\u001b\\"]
[0.00001, "o", "\u001bP+q6b44\u001b\\"]
[0.000004, "o", "\u001bP+q6b68\u001b\\"]
[0.000004, "o", "\u001bP+q4037\u001b\\"]
[0.000009, "o", "\u001bP+q6b50\u001b\\"]
[0.000006, "o", "\u001bP+q6b4e\u001b\\"]
[0.003878, "i", "\u001bP0+r4632\u001b\\\u001bP0+r2531\u001b\\\u001bP0+r2638\u001b\\\u001bP1+r6B62=7F\u001b\\\u001bP1+r6B49=1B5B327E\u001b\\\u001bP1+r6B44=1B5B337E\u001b\\\u001bP1+r6B68=1B4F48\u001b\\\u001bP0+r4037\u001b\\\u001bP1+r6B50=1B5B357E\u001b\\\u001bP1+r6B4E=1B5B367E\u001b\\"]
[0.000059, "o", "\u001bP+q4b31\u001b\\\u001bP+q4b33\u001b\\\u001bP+q4b34\u001b\\\u001bP+q4b35\u001b\\"]
[0.000033, "o", "\u001bP+q6b42\u001b\\\u001bP+q5053\u001b\\\u001bP+q5045\u001b\\"]
[0.003849, "i", "\u001bP0+r4B31\u001b\\\u001bP0+r4B33\u001b\\\u001bP0+r4B34\u001b\\\u001bP0+r4B35\u001b\\\u001bP1+r6B42=1B5B5A\u001b\\\u001bP0+r5053\u001b\\\u001bP0+r5045\u001b\\"]
[3.836839, "i", "\u001b[27;5;102~"]
[0.002284, "o", "\u001b[?25l\u001b[m\r\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C            content,                                                                               \u001b[2;3H            word_count: HashMap::new(),\u001b[3;3H            sentiment_score: 0.0,              \u001b[4;3H            is_processed: false,\u001b[5;3H        }                          \u001b[6;3H    }                  \u001b[9;3H    fn count_words(&mut self) {                                                                    \u001b[10;3H        // Simulate CPU-intensive operation                                                \u001b[11;3H        let start = Instant::now();                                                              \u001b[12;3H        let words = self.content.split_whitespace();\u001b[13;3H        for word in words {                                                                        \u001b[14;3H            let word = word       \r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 11 lines: .to_lowercase()----------------------------------------------------------------------\u001b[m\r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C  "]
[0.000034, "o", "      while start.elapsed().as_millis() < 10 {                                                   \u001b[17;7H        // Spin wait to consume CPU\u001b[18;7H        std::hint::spin_loop();\u001b[19;7H    }              \u001b[20;3H    }\u001b[22;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[23;3H    fn calculate_sentiment(&mut self) -> f64 {                                                     \u001b[24;7H    // Very simple \"sentiment analysis\" - just for demonstration\u001b[25;11Hlet positive_words = [\"good\", \"great\", \"excellent\", \"happy\", \"positive\"];\u001b[26;11Hlet negative_words = [\"bad\", \"awful\", \"terrible\", \"sad\", \"negative\"];\u001b[27;15H        \u001b[28;11Hlet mut score = 0.0;           \u001b[1;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C            content,\u001b[1;125H\u001b[K\u001b[2;105H            word_count: HashMap::new(),\u001b[3;105H            sentiment_score: 0.0,\u001b[3;138H\u001b[K\u001b[4;105H            is_processed: false,\u001b[5;105H        }"]
[0.000443, "o", "\u001b[5;114H\u001b[K\u001b[6;105H    }\u001b[6;110H\u001b[K\u001b[8;105H\u001b[48;5;81m    #[profiled]                                               \u001b[m\u001b[9;105H    fn count_words(&mut self) {\u001b[9;136H\u001b[K\u001b[10;105H        // Simulate CPU-intensive operation\u001b[10;149H\u001b[K\u001b[11;105H        let start = Instant::now();\u001b[11;140H\u001b[K\u001b[12;105H        let words = self.content.split_whitespace();\u001b[13;105H        for word in words {\u001b[13;132H\u001b[K\u001b[14;105H            let word = word\u001b[14;132H\u001b[K\u001b[15;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 11 lines: .to_lowercase()----------------------------------------------------------------------\u001b[m\u001b[16;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C        while start.elapsed().as_millis() < 10 {\u001b[16;153H\u001b[K\u001b[17;109H        // Spin wait to consume CPU\u001b[18;109H        std::hint::spin_loop();\u001b[19;109H    }\u001b[19;114H\u001b[K\u001b[20;105H    }\u001b[22;105H\u001b[48;5;81m    #[profiled]                                                                                    \u001b[m\u001b[23;105H    fn calculate_sentiment(&mut self) -> f64 {\u001b[23;151H\u001b[K\u001b[24;109H    // Very si"]
[0.000015, "o", "mple \"sentiment analysis\" - just for demonstration\u001b[25;113Hlet positive_words = [\"good\", \"great\", \"excellent\", \"happy\", \"positive\"];\u001b[26;113Hlet negative_words = [\"bad\", \"awful\", \"terrible\", \"sad\", \"negative\"];\u001b[27;117H\u001b[K\u001b[28;113Hlet mut score = 0.0;\u001b[28;133H\u001b[K\u001b[30;1H\u001b[K\u001b[1;15H\u001b[?25h"]
[0.752404, "i", "\u001b[27;5;102~"]
[0.001948, "o", "\u001b[?25l        \u001b[2;11Hlet mut score = 0.0;           \r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 21 lines: Simulate intensive calculation-------------------------------------------------------\u001b[m\u001b[4;11H}                       \u001b[5;11H \u001b[6;7H    self.sentiment_score = score;\u001b[7;11Hscore\u001b[8;3H    }                                                                                              \u001b[9;7H                           \u001b[10;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[11;7Hfn summarize(&self) -> String {\u001b[12;11H// Generate a simple summary based on most frequent words\u001b[13;11Hlet start = Instant::now();\u001b[14;15H               \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C        let mut word_vec: Vec<(&String, &usize)> = self.word_count.iter().collect();               \u001b[16;12Hord_vec.sort_by(|a, b| b.1.cmp(a.1));  \r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 15 lines: let summary = word_vec---------------------------------------------------------------\u001b"]
[0.00002, "o", "[m\u001b[18;15H\"Doc #{}: [{}] - Sentiment: {:.2}\",\u001b[19;11H    self.id, summary, self.sentiment_score\u001b[20;7H    )\u001b[21;7H}\u001b[22;3H}                                                                                                  \u001b[23;7H                                          \u001b[24;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[25;3Hasync fn fetch_document(id: usize) -> Document {                                 \u001b[26;7H// Simulate network delay                                                \u001b[27;7Hsleep(Duration::from_millis(50 + (id % 10 * 5) as u64)).await;\u001b[28;11H                    \u001b[1;117H\u001b[K\u001b[2;113Hlet mut score = 0.0;\u001b[2;133H\u001b[K\u001b[3;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 21 lines: Simulate intensive calculation-------------------------------------------------------\u001b[m\u001b[4;113H}\u001b[4;117H\u001b[K\u001b[5;113H\u001b[K\u001b[6;109H    self.sentiment_score = score;\u001b[7;113Hscore"]
[0.000282, "o", "\u001b[8;105H    }\u001b[8;110H\u001b[K\u001b[9;109H\u001b[K\u001b[10;105H\u001b[48;5;81m    #[profiled]                                                                                    \u001b[m\u001b[11;109Hfn summarize(&self) -> String {\u001b[12;113H// Generate a simple summary based on most frequent words\u001b[13;113Hlet start = Instant::now();\u001b[14;117H\u001b[K\u001b[15;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C        let mut word_vec: Vec<(&String, &usize)> = self.word_count.iter().collect();\u001b[15;189H\u001b[K\u001b[16;114Hord_vec.sort_by(|a, b| b.1.cmp(a.1));\u001b[16;152H\u001b[K\u001b[17;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 15 lines: let summary = word_vec---------------------------------------------------------------\u001b[m\u001b[18;117H\"Doc #{}: [{}] - Sentiment: {:.2}\",\u001b[19;113H    self.id, summary, self.sentiment_score\u001b[20;109H    )\u001b[21;109H}\u001b[22;105H}\u001b[22;106H\u001b[K\u001b[23;109H\u001b[K\u001b[24;105H\u001b[48;5;81m#[profiled]                                                                                        \u001b[m\u001b[25;105Hasync fn fetch_document(id: usize) -> Document {\u001b[25;153H\u001b[K\u001b[26;109H// Simulate network dela"]
[0.000028, "o", "y\u001b[26;134H\u001b[K\u001b[27;109Hsleep(Duration::from_millis(50 + (id % 10 * 5) as u64)).await;\u001b[28;113H\u001b[K\u001b[1;3H\u001b[?25h"]
[0.827888, "i", "\u001b[27;5;102~"]
[0.001606, "o", "\u001b[?25l    sleep(Duration::from_millis(50 + (id % 10 * 5) as u64)).await;\u001b[2;11H                    \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    // Generate some random content                                                                \u001b[4;7Hlet content = format!(\r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  4 lines: \"This is document {} with some random content. \\-------------------------------------\u001b[m\u001b[6;11Hid                           \u001b[7;7H);       \u001b[8;7H \u001b[9;7HDocument::new(id, content)\u001b[10;3H}                                                                                                  \u001b[11;7H                               \u001b[12;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[13;3Hasync fn process_document(mut doc: Document) -> Document {\u001b[14;7H// Process document asynchronously\u001b[15;7Hdoc.count_words();                                                              \u001b[16;7Hdoc.calculate_sentiment();                \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C "]
[0.00005, "o", "                                                                                                  \u001b[18;7H// Simulate some async processing          \u001b[19;7Hsleep(Duration::from_millis(20)).await;       \u001b[20;11H \u001b[21;7Hdoc.is_processed = true;\u001b[22;3H    doc\u001b[23;3H}\u001b[24;3H                                                                                                   \u001b[25;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[26;3Hfn batch_process_documents(documents: &mut [Document]) {\u001b[27;7Hfor doc in documents.iter_mut() {                             \u001b[28;11Hdoc.count_words();\u001b[1;109Hsleep(Duration::from_millis(50 + (id % 10 * 5) as u64)).await;\u001b[2;113H\u001b[K\u001b[3;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    // Generate some random content\u001b[3;140H\u001b[K\u001b[4;109Hlet content = format!(\u001b[5;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  4 lines: \"This is document {} with some random content. \\-------------------------------------"]
[0.000327, "o", "\u001b[m\u001b[6;113Hid\u001b[6;115H\u001b[K\u001b[7;109H);\u001b[7;113H\u001b[K\u001b[8;109H\u001b[K\u001b[9;109HDocument::new(id, content)\u001b[10;105H}\u001b[10;106H\u001b[K\u001b[11;109H\u001b[K\u001b[12;105H\u001b[48;5;81m#[profiled]                                                                                        \u001b[m\u001b[13;105Hasync fn process_document(mut doc: Document) -> Document {\u001b[14;109H// Process document asynchronously\u001b[15;109Hdoc.count_words();\u001b[15;127H\u001b[K\u001b[16;109Hdoc.calculate_sentiment();\u001b[16;135H\u001b[K\u001b[17;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[17;105H\u001b[K\u001b[18;109H// Simulate some async processing\u001b[18;142H\u001b[K\u001b[19;109Hsleep(Duration::from_millis(20)).await;\u001b[19;148H\u001b[K\u001b[20;113H\u001b[K\u001b[21;109Hdoc.is_processed = true;\u001b[22;105H    doc\u001b[23;105H}\u001b[24;105H\u001b[K\u001b[25;105H\u001b[48;5;81m#[profiled]                                                                                        \u001b[m\u001b[26;105Hfn batch_process_documents(documents: &mut [Document]) {\u001b[27;109Hfor doc in documents.iter_mut() {\u001b[27;142H\u001b[K\u001b[28;113Hdoc.count_words();\u001b[1;7H\u001b[?25h"]
[0.731262, "i", "\u001b[27;5;102~"]
[0.001495, "o", "\u001b[?25lfor doc in documents.iter_mut() {                             \u001b[2;11Hdoc.count_words();\u001b[3;7H    doc.calculate_sentiment(); \u001b[4;7H    doc.is_processed = true;\r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    }                                                                                              \u001b[6;3H}\u001b[7C  \u001b[7;7H  \u001b[8;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[9;3Hfn analyze_sentiment_distribution(documents: &[Document]) -> HashMap<String, usize> {\u001b[10;3H    let mut distribution = HashMap::new();\u001b[12;3H    for doc in documents {                                                                         \u001b[13;3H        let sentiment = match doc.sentiment_score {       \u001b[14;7H        s if s > 0.5 => \"very_positive\",\r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  6 lines: s if s > 0.0 => \"positive\",----------------------------------------------------------\u001b[m\u001b[16;7H    *distribution.entry(sentiment.to_string()).or_insert(0) += 1;\u001b[17;7H}\u001b[18;7H "]
[0.000045, "o", "                                \u001b[19;7Hdistribution                           \u001b[20;3H}\u001b[21;7H                        \u001b[22;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[23;3Hfn write_reports(documents: &[Document], path: &Path) -> io::Result<()> {\u001b[24;7Hlet mut file = File::create(path)?;\u001b[25;3H                                                                                                   \u001b[26;3H    for doc in documents {                              \u001b[27;7H    if doc.is_processed {        \u001b[28;11H    writeln!(file, \"{}\", doc.summarize())?;\u001b[1;109Hfor doc in documents.iter_mut() {\u001b[1;142H\u001b[K\u001b[2;113Hdoc.count_words();\u001b[3;109H    doc.calculate_sentiment();\u001b[3;139H\u001b[K\u001b[4;109H    doc.is_processed = true;\u001b[5;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    }\u001b[5;110H\u001b[K\u001b[6;105H}\u001b[6;113H\u001b[K\u001b[7;109H\u001b[K\u001b[8;105H\u001b[48;5;81m#[profiled]                                                                                        "]
[0.000348, "o", "\u001b[m\u001b[9;105Hfn analyze_sentiment_distribution(documents: &[Document]) -> HashMap<String, usize> {\u001b[10;105H    let mut distribution = HashMap::new();\u001b[12;105H    for doc in documents {\u001b[12;131H\u001b[K\u001b[13;105H        let sentiment = match doc.sentiment_score {\u001b[13;156H\u001b[K\u001b[14;109H        s if s > 0.5 => \"very_positive\",\u001b[15;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  6 lines: s if s > 0.0 => \"positive\",----------------------------------------------------------\u001b[m\u001b[16;109H    *distribution.entry(sentiment.to_string()).or_insert(0) += 1;\u001b[17;109H}\u001b[18;109H\u001b[K\u001b[19;109Hdistribution\u001b[19;121H\u001b[K\u001b[20;105H}\u001b[21;109H\u001b[K\u001b[22;105H\u001b[48;5;81m#[profiled]                                                                                        \u001b[m\u001b[23;105Hfn write_reports(documents: &[Document], path: &Path) -> io::Result<()> {\u001b[24;109Hlet mut file = File::create(path)?;\u001b[25;105H\u001b[K\u001b[26;105H    for doc in documents {\u001b[26;131H\u001b[K\u001b[27;109H    if doc.is_processed {\u001b[27;134H\u001b[K\u001b[28;113H    writeln!(file, \"{}\", doc.summarize())?;\u001b[1"]
[0.000021, "o", ";7H\u001b[?25h"]
[0.730347, "i", "\u001b[27;5;102~"]
[0.001939, "o", "\u001b[?25l    if doc.is_processed {        \u001b[2;11H    writeln!(file, \"{}\", doc.summarize())?;\r\n\u001b[34m\u001b[48;5;248m-\u001b[m\u001b[9C}                         \u001b[4;7H}                           \u001b[5;7H \u001b[6;3H    Ok(())\u001b[7;3H}\u001b[8;3H                                                                                                   \u001b[9;3H#[allow(dead_code)]                                                                  \u001b[10;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[11;3Hfn load_documents_from_file(path: &Path) -> io::Result<Vec<Document>> {\u001b[12;7Hlet file = File::open(path)?;\u001b[13;7Hlet reader = BufReader::new(file);             \u001b[14;15H                                \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    let mut documents = Vec::new();                                                                \u001b[16;7Hlet mut current_id = 0;                                          \r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 18 lines: let mut current_content = String::new"]
[0.000066, "o", "();---------------------------------------------\u001b[m\u001b[18;11Hdocuments.push(Document::new(current_id, current_content));\u001b[19;7H}           \u001b[20;3H \u001b[21;7HOk(documents)\u001b[22;3H}                                                                                                  \u001b[23;3H                                                                         \u001b[24;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[25;3Hasync fn generate_and_process_documents(count: usize) -> Vec<Document> {\u001b[26;7Hlet mut tasks = Vec::new();\u001b[27;11H                     \u001b[28;7Hfor id in 0..count {                           \u001b[1;109H    if doc.is_processed {\u001b[1;134H\u001b[K\u001b[2;113H    writeln!(file, \"{}\", doc.summarize())?;\u001b[3;103H\u001b[34m\u001b[48;5;248m-\u001b[m\u001b[9C}\u001b[3;114H\u001b[K\u001b[4;109H}\u001b[4;113H\u001b[K\u001b[5;109H\u001b[K\u001b[6;105H    Ok(())\u001b[7;105H}\u001b[8;105H\u001b[K\u001b[9;105H#[allow(dead_code)]\u001b[9;124H\u001b[K\u001b[10;105H\u001b[48;5;81m#[profiled]                                                                           "]
[0.000515, "o", "             \u001b[m\u001b[11;105Hfn load_documents_from_file(path: &Path) -> io::Result<Vec<Document>> {\u001b[12;109Hlet file = File::open(path)?;\u001b[13;109Hlet reader = BufReader::new(file);\u001b[13;143H\u001b[K\u001b[14;117H\u001b[K\u001b[15;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    let mut documents = Vec::new();\u001b[15;140H\u001b[K\u001b[16;109Hlet mut current_id = 0;\u001b[16;132H\u001b[K\u001b[17;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 18 lines: let mut current_content = String::new();---------------------------------------------\u001b[m\u001b[18;113Hdocuments.push(Document::new(current_id, current_content));\u001b[19;109H}\u001b[19;110H\u001b[K\u001b[20;105H\u001b[K\u001b[21;109HOk(documents)\u001b[22;105H}\u001b[22;106H\u001b[K\u001b[23;105H\u001b[K\u001b[24;105H\u001b[48;5;81m#[profiled]                                                                                        \u001b[m\u001b[25;105Hasync fn generate_and_process_documents(count: usize) -> Vec<Document> {\u001b[26;109Hlet mut tasks = Vec::new();\u001b[27;113H\u001b[K\u001b[28;109Hfor id in 0..count {\u001b[28;129H\u001b[K\u001b[1;11H\u001b[?25h"]
[0.706729, "i", "\u001b[27;5;102~"]
[0.001214, "o", "\u001b[?25l                     \u001b[2;7Hfor id in 0..count {                           \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[9Ctasks.push(async move {\u001b[4;7H \u001b[7Clet doc = fetch_document(id).await;\r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  2 lines: process_document(doc).await----------------------------------------------------------\u001b[m\u001b[6;7H}     \u001b[7;3H \u001b[8;7Hjoin_all(tasks).await\u001b[9;3H}                  \u001b[10;3H                                                                                                   \u001b[11;3H#[tokio::main]                                                         \u001b[12;3H\u001b[94m\u001b[48;5;159m---------------------------------------------------------------------------------------------------\u001b[m\u001b[13;3Hasync fn main() -> io::Result<()> {   \u001b[14;7H// Process a batch of documents asynchronously\u001b[15;11Hdocs = generate_and_process_documents(50).await;\u001b[16;7H                       \r\n\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    // Analyze the results                                                                         \u001b[18;7Hlet senti"]
[0.000021, "o", "ment_distribution = analyze_sentiment_distribution(&docs);\r\n\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+-- 43 lines: println!(\"Sentiment distribution: {:?}\", sentiment_distribution);--------------------\u001b[m\r\n\u001b[94m~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                                    \r\n~                                                                                            "]
[0.000355, "o", "        \r\n~                                                                                                    \u001b[m\u001b[1;113H\u001b[K\u001b[2;109Hfor id in 0..count {\u001b[2;129H\u001b[K\u001b[3;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[9Ctasks.push(async move {\u001b[4;109H \u001b[7Clet doc = fetch_document(id).await;\u001b[5;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1C\u001b[34m\u001b[48;5;248m+--  2 lines: process_document(doc).await----------------------------------------------------------\u001b[m\u001b[6;109H}\u001b[6;110H\u001b[K\u001b[7;105H\u001b[K\u001b[8;109Hjoin_all(tasks).await\u001b[9;105H}\u001b[9;106H\u001b[K\u001b[10;105H\u001b[K\u001b[11;105H#[tokio::main]\u001b[11;119H\u001b[K\u001b[12;105H\u001b[48;5;81m#[enable_profiling]                                                                                \u001b[m\u001b[13;105Hasync fn main() -> io::Result<()> {\u001b[13;140H\u001b[K\u001b[14;109H// Process a batch of documents asynchronously\u001b[15;113Hdocs = generate_and_process_documents(50).await;\u001b[16;109H\u001b[K\u001b[17;103H\u001b[34m\u001b[48;5;248m \u001b[m\u001b[1C    // Analyze the results\u001b[17;131H\u001b[K\u001b[18;109Hlet sentiment_distribution = analyze_sentiment_distribution(&docs);\u001b[19;103H\u001b[34m\u001b[48;5;248m+\u001b[m\u001b[1"]
[0.000024, "o", "C\u001b[34m\u001b[48;5;248m+-- 43 lines: println!(\"Sentiment distribution: {:?}\", sentiment_distribution);--------------------\u001b[m\u001b[20;103H\u001b[94m~                                                                                                    \u001b[21;103H~                                                                                                    \u001b[22;103H~                                                                                                    \u001b[23;103H~                                                                                                    \u001b[24;103H~                                                                                                    \u001b[25;103H~                                                                                                    \u001b[26;103H~                                                                                                    \u001b[27;103H~                                                                                                    "]
[0.000089, "o", "\u001b[28;103H~                                                                                                    \u001b[1;3H\u001b[?25h"]
[1.399792, "i", ":"]
[0.001776, "o", "\u001b[?25l\u001b[30;1H\u001b[m:\u001b[?25h"]
[0.400072, "i", "q"]
[0.000313, "o", "q"]
[0.386895, "i", "a"]
[0.000282, "o", "a"]
[1.02403, "i", "!"]
[0.000265, "o", "!"]
[1.955217, "i", "\r"]
[0.000227, "o", "\r"]
[0.011971, "o", "\u001b[?25l\u001b[?2004l\u001b[>4;m\u001b[23;2t\u001b[23;1t"]
[0.000033, "o", "\u001b[30;1H\u001b[K\u001b[30;1H\u001b[?1004l\u001b[?2004l\u001b[?1l\u001b>\u001b[?1049l\u001b[?25h\u001b[>4;m"]
[0.004343, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                          \r \r"]
[0.000146, "o", "\u001b]133;D;0\u0007"]
[0.02916, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007"]
[0.016701, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b]133;A\u0007$ \u001b]133;B\u0007\u001b[K\u001b[?2004h"]
[4.831236, "i", "t"]
[0.000999, "o", "t"]
[0.148335, "i", "h"]
[0.000589, "o", "\bth"]
[0.131211, "i", "a"]
[0.00032, "o", "a"]
[0.173869, "i", "g"]
[0.000254, "o", "g"]
[0.173035, "i", " "]
[0.00035, "o", " "]
[0.607765, "i", "\u001b[200~demo/document_pipeline_instr.rs\u001b[201~"]
[0.000873, "o", "\u001b[7mdemo/document_pipeline_instr.rs\u001b[27m"]
[1.361631, "i", "\r"]
[0.000661, "o", "\u001b[31D\u001b[27md\u001b[27me\u001b[27mm\u001b[27mo\u001b[27m/\u001b[27md\u001b[27mo\u001b[27mc\u001b[27mu\u001b[27mm\u001b[27me\u001b[27mn\u001b[27mt\u001b[27m_\u001b[27mp\u001b[27mi\u001b[27mp\u001b[27me\u001b[27ml\u001b[27mi\u001b[27mn\u001b[27me\u001b[27m_\u001b[27mi\u001b[27mn\u001b[27ms\u001b[27mt\u001b[27mr\u001b[27m.\u001b[27mr\u001b[27ms"]
[0.00005, "o", "\u001b[?2004l\r\r\n"]
[0.001585, "o", "\u001b]133;C;\u0007"]
[0.081816, "o", "\u001b]11;?\u0007"]
[0.003953, "i", "\u001b]11;rgb:f9f9/f5f5/d7d7\u001b\\"]
[1.31442, "o", "\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\r\n"]
[0.897139, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m "]
[0.00025, "o", "[===========>                     ] 13 complete; 0 pending                                                                                                                                  "]
[0.000584, "o", "\u001b]9;4;3;0\u001b\\"]
[0.000013, "o", "\r"]
[0.098531, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [==============>                  ] 30 complete; 10 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.160444, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [==============>                  ] 37 complete; 3 pending                                                                                                                                  \u001b]9;4;3;0\u001b\\\r"]
[0.334468, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [==============>                  ] 38 complete; 2 pending                                                                                                                                  \u001b]9;4;3;0\u001b\\\r"]
[0.11321, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [==============>                  ] 40 complete; 0 pending                                                                                                                                  \u001b]9;4;3;0\u001b\\\r"]
[0.102147, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [=================>               ] 71 complete; 11 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.155745, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [=================>               ] 72 complete; 10 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.461429, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [=================>               ] 82 complete; 0 pending                                                                                                                                  \u001b]9;4;3;0\u001b\\\r"]
[0.259427, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [====================>            ] 101 complete; 3 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.457181, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [====================>            ] 104 complete; 0 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.234713, "o", "\u001b[1m\u001b[36m       Fetch\u001b[0m [=======================>         ] 119 complete; 0 pending                                                                                                                                 \u001b]9;4;3;0\u001b\\\r"]
[0.122804, "o", "\u001b[K\u001b[1m\u001b[32m     Locking\u001b[0m 137 packages to latest compatible versions\r\n"]
[0.22448, "o", "\u001b]9;4;0;0\u001b\\"]
[0.012128, "o", "\u001b]9;4;0;0\u001b\\"]
[0.008476, "o", "\u001b]9;4;0;0\u001b\\"]
[0.158812, "o", "\u001b[1m\u001b[32m   Compiling\u001b[0m futures-util v0.3.31\r\n"]
[0.000477, "o", "\u001b[1m\u001b[32m   Compiling\u001b[0m thag_common v0.2.0 (/Users/donf/projects/thag_rs/thag_common)\r\n"]
[0.010328, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [======================>  ] 111/117: thag_common, futures-util                                                                                                                              "]
[0.000033, "o", "\u001b]9;4;1;95\u001b\\\r"]
[0.563912, "o", "\u001b[K\u001b[1m\u001b[32m   Compiling\u001b[0m thag_profiler v0.1.0 (/Users/donf/projects/thag_rs/thag_profiler)\r\n"]
[0.000151, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [======================>  ] 111/117: thag_common, futures-util, thag_profiler                                                                                                               \u001b]9;4;1;95\u001b\\\r"]
[0.837977, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [======================>  ] 112/117: futures-util, thag_profiler                                                                                                                            \u001b]9;4;1;96\u001b\\\r"]
[0.322007, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 113/117: futures-util                                                                                                                                           \u001b]9;4;1;97\u001b\\\r"]
[1.220644, "o", "\u001b[K\u001b[1m\u001b[32m   Compiling\u001b[0m futures-executor v0.3.31\r\n"]
[0.000111, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 113/117: futures-executor, futures-util                                                                                                                         \u001b]9;4;1;97\u001b\\\r"]
[0.012586, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 114/117: futures-executor                                                                                                                                       \u001b]9;4;1;97\u001b\\\r"]
[0.520855, "o", "\u001b[K\u001b[1m\u001b[32m   Compiling\u001b[0m futures v0.3.31\r\n"]
[0.000043, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 114/117: futures-executor, futures                                                                                                                              \u001b]9;4;"]
[0.000073, "o", "1;97\u001b\\\r"]
[0.010118, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 115/117: futures                                                                                                                                                \u001b]9;4;1;98\u001b\\\r"]
[0.445297, "o", "\u001b[K\u001b[1m\u001b[32m   Compiling\u001b[0m document_pipeline_instr v0.0.1 (/var/folders/rx/mng2ds0s6y53v12znz5jhpk80000gn/T/thag_rs/document_pipeline_instr)\r\n"]
[0.000304, "o", "\u001b[1m\u001b[36m    Building\u001b[0m [=======================> ] 116/117: document_pipeline_instr(bin)                                                                                                                           \u001b]9;4;1;99\u001b\\\r"]
[0.808861, "o", "\u001b[K\u001b]9;4;0;0\u001b\\"]
[0.000058, "o", "\u001b[1m\u001b[32m    Finished\u001b[0m \u001b]8;;https://doc.rust-lang.org/cargo/reference/profiles.html#default-profiles\u001b\\`dev` profile [unoptimized + debuginfo]\u001b]8;;\u001b\\ target(s) in 23.66s\r\n"]
[0.00032, "o", "\u001b]9;4;0;0\u001b\\"]
[0.008174, "o", "\u001b]9;4;0;0\u001b\\"]
[0.059542, "o", "\u001b[38;2;173;109;11m\u001b[1mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\u001b[0m\r\n"]
[9.813689, "o", "Sentiment distribution: {\"neutral\": 50}\r\n"]
[2.768067, "o", "Processed 80 documents with 2020 total words\r\n"]
[1.730609, "o", "Reports written successfully\r\n"]
[0.187075, "o", "\u001b[38;2;173;109;11m\u001b[1mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\u001b[0m\r\n"]
[0.006891, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                          \r \r"]
[0.002063, "o", "\u001b]133;D;0\u0007"]
[0.024914, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007"]
[0.018356, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b]133;A\u0007$ \u001b]133;B\u0007\u001b[K\u001b[?2004h"]
[3.007734, "i", "t"]
[0.000201, "o", "t"]
[0.121812, "i", "h"]
[0.000348, "o", "\bth"]
[0.13627, "i", "a"]
[0.000337, "o", "a"]
[0.127699, "i", "g"]
[0.000191, "o", "g"]
[0.56086, "i", "_"]
[0.00027, "o", "_"]
[0.294162, "i", "p"]
[0.00033, "o", "p"]
[0.260697, "i", "r"]
[0.000292, "o", "r"]
[0.087448, "i", "o"]
[0.000204, "o", "o"]
[0.263515, "i", "f"]
[0.000262, "o", "f"]
[0.101462, "i", "i"]
[0.000146, "o", "i"]
[0.515791, "i", "l"]
[0.000187, "o", "l"]
[0.137118, "i", "e"]
[0.000207, "o", "e"]
[0.384444, "i", " "]
[0.0007, "o", " "]
[0.178511, "i", "."]
[0.000227, "o", "."]
[1.628055, "i", "\r"]
[0.000289, "o", "\u001b[?2004l\r\r\n"]
[0.00105, "o", "\u001b]133;C;\u0007"]
[0.073047, "o", "\u001b]11;?\u0007"]
[0.003941, "i", "\u001b]11;rgb:f9f9/f5f5/d7d7\u001b\\"]
[0.000577, "o", "\r\r\n"]
[0.007039, "o", "\u001b[?25l\u001b["]
[0.000023, "o", "38;"]
[0.000189, "o", "5;10m?\u001b[39m "]
[0.000011, "o", "\u001b[38;"]
[0.000102, "o", "2;80;73;69mSelect analysis type:\u001b[39m  \r\n\u001b[38;5;14m>\u001b[39m \u001b[38;2;214;93;14m"]
[0.000007, "o", "\u001b[1mTime Profile - Single\u001b[39m\u001b[0m\r\n  \u001b[38;"]
[0.000071, "o", "2;80;73;69mTime Profile - Differential\u001b[39m\r\n  \u001b[38;2;80;73;69mMemory Profile - Single\u001b[39m\r\n  "]
[0.000007, "o", "\u001b[38;2;80;73;69mMemory Profile - Differential\u001b[39m\r\n  \u001b[38;2;80;73;69mExit\u001b["]
[0.000002, "o", "39m"]
[0.000009, "o", "\r\n\u001b[38;2;7;102"]
[0.000005, "o", ";"]
[0.000004, "o", "120m["]
[0.000004, "o", "\u001b[39m\u001b["]
[0.000002, "o", "38;2;"]
[0.000005, "o", "7;102"]
[0.000004, "o", ";120m"]
[0.000005, "o", "â†‘â†“ to move, enter to select, type to filter\u001b[39m"]
[0.000025, "o", "\u001b[38;2;7"]
[0.000007, "o", ";102;120m]"]
[0.000004, "o", "\u001b[39m"]
[0.000005, "o", "\r\u001b[6A"]
[0.000004, "o", "\u001b[24"]
[0.000004, "o", "C\u001b[?25h"]
[2.479292, "i", "\r"]
[0.002026, "o", "\u001b[?25l\u001b[24D\u001b[38;5;10m>\u001b[39m \u001b[38;2;80;73;69mSelect analysis type:\u001b[39"]
[0.000049, "o", "m \u001b[38;2;40;40;40mTime Profile - Single\u001b[39m\u001b[K\r\n\u001b[2K\r\n\u001b[2K\r\n\u001b[2K\r\n\u001b[2K\r\n\u001b[2K\r\n\u001b[2K\r\n\u001b[?25h"]
[0.000145, "o", "\u001b[6A\u001b[?25h"]
[0.001603, "o", "\r\nAvailable profile files:\r\n1. document_pipeline_instr (2 files)\r\n   1.1: document_pipeline_instr-20251014-095335.folded\r\n   1.2: document_pipeline_instr-20251014-095335-inclusive.folded\r\n2. owo_styles (4 files)\r\n   2.1: owo_styles-20250629-090558.folded\r\n   2.2: owo_styles-20250629-090558-inclusive.folded\r\n   2.3: owo_styles-20250629-090201.folded\r\n"]
[0.000024, "o", "   ... and 1 more\r\n3. ratatui_user_input_profile (2 files)\r\n   3.1: ratatui_user_input_profile-20250629-193608.folded\r\n   3.2: ratatui_user_input_profile-20250629-193608-inclusive.folded\r\n4. smol_chat_server_profile (2 files)\r\n"]
[0.000004, "o", "   4.1: smol_chat_server_profile-20250709-084446.folded\r\n   4.2: smol_chat_server_profile-20250709-084446-inclusive.folded\r\n\r\n"]
[0.000186, "o", "\u001b[?25l\u001b[38;5;10m?\u001b[39"]
[0.000014, "o", "m \u001b[38;2;80;73;"]
[0.000006, "o", "69mSelect an option:\u001b["]
[0.000003, "o", "39m"]
[0.000005, "o", "  \r\n"]
[0.000006, "o", "\u001b[38;5;14m"]
[0.000005, "o", ">\u001b[39"]
[0.000002, "o", "m "]
[0.000009, "o", "\u001b[38;2;214;"]
[0.000005, "o", "93;14m"]
[0.000005, "o", "\u001b[1m"]
[0.000003, "o", "Filter/modify selection"]
[0.000006, "o", "\u001b[39m\u001b["]
[0.000006, "o", "0m\r\n"]
[0.000002, "o", "  "]
[0.000006, "o", "\u001b[38;2;80"]
[0.000003, "o", ";73"]
[0.000003, "o", ";69"]
[0.000003, "o", "m"]
[0.000005, "o", "1. document_pipeline_instr (2 files)\u001b[39m\r"]
[0.000003, "o", "\n"]
[0.000006, "o", "  \u001b[38;2;"]
[0.000003, "o", "80"]
[0.000003, "o", ";73"]
[0.000002, "o", ";69"]
[0.000008, "o", "m2. owo_styles (4 files)\u001b[39m"]
[0.000006, "o", "\r\n  "]
[0.000003, "o", "\u001b[38;"]
[0.000006, "o", "2;80;73"]
[0.000006, "o", ";69m"]
[0.000005, "o", "3. ratatui_user_input_profile (2 files)\u001b[39m"]
[0.000003, "o", "\r\n"]
[0.000006, "o", "  \u001b[38;"]
[0.000002, "o", "2;80"]
[0.000006, "o", ";73;69"]
[0.000005, "o", "m4. smol_chat_server_profile (2 files)\u001b["]
[0.000004, "o", "39m\r"]
[0.000002, "o", "\n\u001b["]
[0.000003, "o", "38;"]
[0.000002, "o", "2;7"]
[0.000007, "o", ";102;120m"]
[0.000006, "o", "[\u001b[39m"]
[0.000003, "o", "\u001b[38;"]
[0.000002, "o", "2;7"]
[0.000006, "o", ";102;120"]
[0.000003, "o", "mâ†‘â†“ to move, enter to select, type to filter"]
[0.000007, "o", "\u001b[39m\u001b[38;"]
[0.000058, "o", "2;7;102;120m]\u001b[39m\r\u001b[6A\u001b[20C\u001b[?25h"]
[1.880424, "i", "\u001b[B"]
[0.002207, "o", "\u001b[?25l\u001b[20D\r\n  \u001b[38;2;80;73;69mFilter/modify selection\u001b[39m\u001b[K\r\n\u001b[38;5;14m>\u001b[39"]
[0.000039, "o", "m \u001b[38;2;214;93;14m\u001b[1m"]
[0.000012, "o", "1. document_pipeline_instr (2 files)\u001b[39m\u001b["]
[0.000005, "o", "0m"]
[0.000005, "o", "\u001b[K\r"]
[0.000004, "o", "\n"]
[0.000004, "o", "\r\n"]
[0.000004, "o", "\r"]
[0.000004, "o", "\n\r"]
[0.000009, "o", "\n\r\u001b[6"]
[0.000009, "o", "A\u001b[20C"]
[0.000009, "o", "\u001b[?25h"]
[1.269724, "i", "\r"]
[0.000548, "o", "\u001b[?25l\u001b[20D\u001b[38;5;10m>\u001b[39m \u001b[38;2;"]
[0.000016, "o", "80;73;69mSelect an option:\u001b["]
[0.000005, "o", "39"]
[0.000024, "o", "m \u001b[38;2;40;40;"]
[0.000011, "o", "40m1. document_pipeline_instr (2 files)\u001b["]
[0.000014, "o", "39m\u001b[K\r"]
[0.000005, "o", "\n\u001b[2K\r"]
[0.000011, "o", "\n\u001b[2K\r\n"]
[0.000005, "o", "\u001b[2K\r"]
[0.00001, "o", "\n\u001b[2K\r"]
[0.000013, "o", "\n\u001b[2K\r\n"]
[0.000016, "o", "\u001b[2K\r\n\u001b[?25h"]
[0.000134, "o", "\u001b[6A\u001b[?25h"]
[0.001409, "o", "\u001b[?25l\u001b[38;5;10m?\u001b[39m \u001b[38;2;80;73;69mSelect profile to analyze:\u001b[39m  \r\n\u001b[38;5;14m>\u001b[39m \u001b[38;2;214;93;14m\u001b[1m./document_pipeline_instr-20251014-095335.folded\u001b[39m"]
[0.000027, "o", "\u001b[0m\r\n  \u001b[38;2;80;73;69m./document_pipeline_instr-20251014-095335-inclusive.folded\u001b[39m\r\n  \u001b[38;2;80;73;69mBack\u001b[39m\r\n\u001b[38;2;7;"]
[0.000022, "o", "102;120m[\u001b[39m\u001b[38;2;7;102;120mâ†‘â†“ to move, enter to select, type to filter"]
[0.000008, "o", "\u001b[39m\u001b[38;2;7;"]
[0.000011, "o", "102;120m]\u001b[39m"]
[0.000003, "o", "\r\u001b["]
[0.000004, "o", "4A"]
[0.000009, "o", "\u001b[29C\u001b[?25h"]
[2.7942, "i", "\r"]
[0.000581, "o", "\u001b[?25l\u001b[29D\u001b[38;5;10m>\u001b[39m \u001b["]
[0.000047, "o", "38;2;80;73;69mSelect profile to analyze:\u001b[39m \u001b[38;2;"]
[0.000014, "o", "40;40;40"]
[0.000012, "o", "m./document_pipeline_instr-20251014-095335.folded\u001b[39"]
[0.000013, "o", "m\u001b[K\r"]
[0.000012, "o", "\n\u001b[2K\r\n"]
[0.000005, "o", "\u001b[2K\r"]
[0.000006, "o", "\n\u001b[2K"]
[0.000013, "o", "\r\n\u001b[2K\r"]
[0.000013, "o", "\n\u001b[?25h"]
[0.000157, "o", "\u001b[4A\u001b[?25h"]
[0.026247, "o", "\u001b[?25l\u001b[38;5;10m?\u001b[39m \u001b[38;2;80;73;69mSelect action:\u001b[39m  \r\n\u001b[38;"]
[0.000039, "o", "5;14m>\u001b[39m \u001b[38;2;214;93;14m\u001b[1mShow Aggregated Execution Timeline (Flamegraph)\u001b[39m\u001b[0"]
[3.000009, "o", "\u001b[K\r\n\u001b[2K"]
[0.00001, "o", "\r\n\u001b[2K\r"]
[0.000009, "o", "\n\u001b[2K\r\n"]
[0.000009, "o", "\u001b[2K\r\n\u001b[2K"]
[0.000004, "o", "\r\n"]
[0.000008, "o", "\u001b[2K\r\n\u001b[2K"]
[0.000008, "o", "\r\n\u001b[2K\r"]
[0.000006, "o", "\n\u001b[?25h"]
[0.000148, "o", "\u001b[8A\u001b[?25h"]
[0.002629, "o", "\u001b[?25l\u001b[38;5;10m?\u001b[39m \u001b[38;2;80;73;69mUse last color scheme (Rust)? (Press 'n' to select a different scheme)\u001b[39m (Y/n)  \r\u001b[79C\u001b[?25h"]
[5.996437, "o", "\u001b[?25l\u001b[79D\u001b[38;5;10m?\u001b[39m \u001b[38;2;80;73;69mUse last color scheme (Rust)? (Press 'n' to select a different scheme)\u001b[39m \u001b[38;"]
[0.033224, "o", "\u001b]1337;RemoteHost=donf@MacBook-Air.local\u0007\u001b]1337;CurrentDir=/Users/donf/projects/thag_rs\u0007"]
[3.017871, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b]133;A\u0007$ \u001b]133;B\u0007\u001b[K\u001b[?2004h"]
[0.01296, "x", "0"]
