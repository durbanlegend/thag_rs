diff --git a/thag_rs/thag_profiler/src/mem_tracking.rs b/thag_rs/thag_profiler/src/mem_tracking.rs
index 0000000..0000000 100644
--- a/thag_rs/thag_profiler/src/mem_tracking.rs
+++ b/thag_rs/thag_profiler/src/mem_tracking.rs
@@ -61,9 +61,24 @@ std::thread_local! {
 
 // Function to initialize thread's allocator state for cross-thread contexts (like async tasks)
 pub fn initialize_thread_allocator_context() {
-    let inherited = CURRENT_ALLOCATOR_CONTEXT.with(|cell| cell.get());
+    // Get the inherited allocator context safely
+    let inherited = match std::panic::catch_unwind(|| {
+        CURRENT_ALLOCATOR_CONTEXT.with(|cell| cell.get())
+    }) {
+        Ok(alloc) => alloc,
+        Err(_) => {
+            // Default to system allocator if thread local access fails
+            Allocator::System
+        }
+    };
+
     ALLOCATOR_STATE.with(|state| {
-        let mut state = state.borrow_mut();
+        // Try to borrow the state mutably, but don't panic if already borrowed
+        let state_result = state.try_borrow_mut();
+        if state_result.is_err() {
+            return; // Skip if already borrowed
+        }
+        let mut state = state_result.unwrap();
         // Only initialize if not already set
         if state.1 == 0 {
             state.0 = inherited;