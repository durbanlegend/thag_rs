[package]
description = "A versatile cross-platform script runner and REPL for Rust snippets, expressions and programs.\nAccepts a script file or dynamic options."
name = "thag_rs"
version = "0.1.9"
authors = ["Don Forbes <don.forbes3@gmail.com>"]
edition = "2021"
license = "MIT OR Apache-2.0"
# Include the demo directory in the crate packagename = "thag_rs"
include = [
    "assets/default_config.toml",
    "src/**",
    "Cargo.toml",
    "README.md",
    "build.rs",
    "demo/**",
    "tools/**",
    "tests/**",
]
default-run = "thag"
readme = "README.md"
repository = "https://github.com/durbanlegend/thag_rs"
categories = ["command-line-utilities", "development-tools::build-utils"]
keywords = ["REPL", "command-line", "eval", "runner", "script"]

[package.metadata.wix]
upgrade-guid = "FA5CCD40-AB09-488D-817D-867B69E10F7B"
path-guid = "CCDE9D5F-06C2-42C2-8BF7-6EB41E46A496"
license = false
eula = false

[dependencies]
backtrace = "0.3"
bitflags = { version = "2.9.0", optional = true }
cargo-lookup = { version = "0.1.0", optional = true }
cargo_toml = { version = "0.22.1", optional = true }
# dirs = { version = "6.0.0", optional = true }
chrono = "0.4.39"
clap = { version = "4.5.36", features = ["cargo", "derive"], optional = true }
crossterm = { version = "0.29", features = ["use-dev-tty"], optional = true }
directories = "6.0"
document-features = "0.2.10"
documented = "0.9.1"
edit = { version = "0.1.5", optional = true }
env_logger = { version = "0.11.8", optional = true }
# inferno = { version = "0.12.0", optional = true }
# inquire = { version = "0.7.5", optional = true }
log = "0.4.27"
mockall = { version = "0.13.1", optional = true }
nu-ansi-term = { version = "0.50.1", optional = true }
# once_cell = "1.20.3"
phf = { version = "0.11", features = ["macros"] }
prettyplease = { version = "0.2.31", optional = true }
proc-macro2 = "1.0.95"
quote = { version = "1.0.40", optional = true }
ratatui = { version = "0.29.0", optional = true }
reedline = { version = "0.39.0", optional = true }
regex = "1.11.1"
scopeguard = { version = "1.2.0", optional = true }
semver = "1.0.26"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = { version = "1.0.140", optional = true }
serde_merge = { version = "0.1.3", optional = true }
# serde_with = { version = "3.11.0", optional = true }
side-by-side-diff = { version = "0.1.2", optional = true }
simplelog = { version = "0.12.2", optional = true }
strict = "0.2.0"
strum = { version = "0.27.1", features = ["derive", "phf"] }
supports-color = { version = "3.0.2", optional = true }
syn = { version = "2", features = [
    "extra-traits",
    "full",
    "visit",
    "visit-mut",
], optional = true }
termbg = { version = "0.6.1", optional = true }
thag_proc_macros = { version = "0.1.2", path = "thag_proc_macros" }
thag_profiler = { path = "thag_profiler", version = "0.1" }
toml = { version = "0.8.20" }
toml_edit = { version = "0.22.24", optional = true }
# `tui-textarea` is used for the `tui` feature`.
tui-textarea = { version = "0.7", features = [
    "crossterm",
    "search",
], optional = true }

[build-dependencies]
phf = { version = "0.11", features = ["macros"] }
tempfile = "3.19"
toml = "0.8.19"

[target.'cfg(windows)'.dependencies]
win32console = "0.1.5"
winapi = "0.3.9"

[profile.dev]
# opt-level = 1            # Use slightly better optimizations.
debug = true
debug-assertions = true
incremental = true

[profile.release]
debug = false

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[lib]
name = "thag_rs"
path = "src/lib.rs"

[[bin]]
name = "thag"
path = "src/bin/thag_rs.rs"

[features]
# Core and Logging Features
core = ["error_handling", "log_impl"] # Foundation for all features
error_handling = []
log_impl = []                         # Requires either simplelog or env_logger

# Logging implementations (mutually exclusive)
simplelog = ["dep:simplelog", "log_impl"]
env_logger = ["dep:env_logger", "log_impl"]

# AST and Parsing
ast = [
    "core",  # Explicit dependency on core for logging
    "quote",
    "syn",
]

# Configuration and Color Support
config = ["core", "edit", "mockall", "toml_edit"]

color_detect = ["config", "crossterm", "scopeguard", "supports-color", "termbg"]

# Build and Analysis
build = [
    "ast",               # For syntax parsing
    "bitflags",
    "cargo-lookup",
    "cargo_toml",
    "clap",
    "config",            # For terminal support
    "crossterm",
    "prettyplease",
    "serde_merge",
    "side-by-side-diff",
]

tui = [
    "build",                # Full build capabilities
    "ratatui",
    "scopeguard",
    "serde_json",
    "tui-textarea",
    "thag_proc_macros/tui",
] # UI Features

repl = [
    "tui",          # Includes all TUI features
    "nu-ansi-term",
    "reedline",
]

full = ["color_detect", "repl"] # Simplified as repl includes everything

# Default Configuration
default = ["full", "simplelog"] # Full features with simplelog

# Optional/Debug Features
debug-logs = []
nightly = []
format_snippet = []
profiling = ["thag_profiler/full_profiling", "thag_proc_macros/full_profiling"]

# Feature dependency tree:
#
# default
# └── full
#     ├── repl
#     │   └── tui
#     │       ├── build
#     │       │   ├── ast
#     │       │   │   ├── core  ★                # Fundamental feature set
#     │       │   │   │   ├── error_handling     # Error types and handling
#     │       │   │   │   ├── log_impl           # Basic logging infrastructure
#     │       │   │   │   │   └── (simplelog | env_logger)
#     │       │   │   │   └── styling            # Basic terminal styling
#     │       │   │   ├── quote
#     │       │   │   └── syn
#     │       │   ├── config
#     │       │   │   ├── core  ★ (shared)       # Core features required here too
#     │       │   │   ├── mockall
#     │       │   │   ├── serde_with
#     │       │   │   └── toml_edit
#     │       │   └── crossterm                  # Terminal control
#     │       │
#     │       ├── ratatui                        # TUI framework
#     │       ├── tui-textarea                   # Text editing widget
#     │       ├── serde_json                     # JSON support
#     │       └── scopeguard                     # Resource cleanup (shared with color_detect)
#     │
#     └── color_detect     # Optional terminal detection, only included in full
#         ├── config
#         ├── crossterm    # (shared with build)
#         ├── scopeguard   # (shared with tui)
#         ├── supports-color
#         └── termbg

# Core Feature Set (★):
# - Basic logging and error handling
# - Essential macros: cprtln, debug_log, lazy_static_var, vlog, regex
# - Styling system and macros: cvprtln, style_for_role
# - Fundamental types and traits
#
# Optional features:
# - profiling     # Enables profiling via thag_profiler (for internal use)
# - debug-logs
# - nightly
# - format_snippet
#
# Common Usage Patterns:
# 1. Just core functionality:
#    features = ["core", "simplelog"]
#
# 2. Core with profiling enabled:
#    features = ["core", "simplelog", "profiling"]
#
# 3. Core with color detection:
#    features = ["core", "color_detect", "simplelog"]
#
# 4. Full functionality with profiling:
#    features = ["full", "simplelog", "profiling"]
#
# Optional features can be added at any level:
# - debug-logs
# - nightly
# - format_snippet
# - profiling
#
# Note: When using without default features, must specify a logging implementation:
# cargo add thag_rs --no-default-features --features="repl,simplelog"
# or
# cargo add thag_rs --no-default-features --features="repl,env_logger"

# # New feature for the profiling tools
# profile_analyze = [
#     "core",
#     "dirs",
#     "inferno",
#     "inquire",
#     "serde_json",
#     "simplelog",
# ]
# profile_instrument = ["core", "ra_ap_syntax", "ra-ap-rustc_lexer", "simplelog"]
# profile_tools = ["profile_instrument", "profile_analyze"]

[package.metadata.cargo-features-validate]
# Additional validation that logging feature is satisfied
requires-any = [["simplelog", "env_logger"]]

[dev-dependencies]
assert_cmd = "2.0.17"
criterion = "0.5.1"
either = "1.15.0"
env_logger = "0.11.5"
lazy_static = "1.5.0"
predicates = "3.1.2"
serial_test = "3.2.0"
tempfile = "3.19"
test-generator = "0.3.1"
tokio = { version = "1.36.0", features = ["rt", "macros", "time"] }

[[bench]]
name = "filter_bench"
harness = false

[workspace]
members = ["thag_proc_macros", "thag_profiler"]
exclude = ["bank/proc_macros", "demo/proc_macros"]

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.21.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell", "msi"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
    "aarch64-apple-darwin",
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-gnu",
    "x86_64-unknown-linux-musl",
    "x86_64-pc-windows-msvc",
]
# Path that installers should place binaries in
install-path = "CARGO_HOME"
# Whether to install an updater program
install-updater = false
# Trigger releases manually instead of on tag-push (DHF temp)
# dispatch-releases = false
#
[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["demo.zip"]
build = ["sh", "-c", "zip demo.zip demo/*"]

[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["tools.zip"]
build = ["sh", "-c", "zip tools.zip tools/*"]

[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["assets/default_config.toml"]
# no-op:
build = ["true"] # UI features# Feature Bundles
