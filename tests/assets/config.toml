[logging]
# Available options for Verbosity:
#   quieter - Minimal output, suitable for piping to another process
#   quiet - Less detailed output
#   normal - Standard output level
#   verbose - More detailed output
#   debug - Maximum detail for debugging

default_verbosity = "normal"

[colors]
# Color support override. Sets the terminal's color support level. The alternative is
# to leave it up to thag_rs, which depending on the platform may call 3rd-party crates
# to interrogate the terminal, which could cause misbehaviour, or may choose a default,
# which might not take advantage of the full capabilities of the terminal.
# If the terminal can't handle your chosen level, this may cause unwanted control strings
# to be interleaved with the messages.
# If your terminal can handle 16m colors, choose xterm256
# Valid values are:
# "xterm256"    for 256 or more colors (including 16m)
# "ansi16"      for basic color support
# "none"        color support not available or not desired
# "default"     (default value) let thag_rs figure it out
# color_support = "ansi16"

# Terminal light/dark override. Tells thag_rs whether you are using a light or dark theme,
# instead of letting thag_rs interrogate the terminal, which could cause misbehaviour
# on Windows in particular, or choose a default, which if incorrect could compromise the
# legibility of text.
# Valid values are: "dark" or "light".
# "dark" is generally a safe choice as the colors should be legible even for a light theme
# term_theme = "dark"

[proc_macros]
# Allows user to specify a manifest directory path for the thag_demo_proc_macro crate. This is
# a prerequisite for the `thag_rs` proc-macros feature.
#
# Specify a valid absolute or relative path string if required, e.g. "/Users/thag/projects/thag_rs/demo/proc_macros/Cargo.toml".
# Relative paths should be relative to the current working directory.
# A single forward slash is the required path separator in all environments including Windows.
# Default value: "demo/proc_macros".
# proc_macro_crate_path = "/Users/donf/projects/thag_rs/demo/proc_macros"
# proc_macro_crate_path = "demo/proc_macros"

[dependencies]

# How much `thag_rs` should intervene in inferring dependencies from code.
# Options are "maximal", "minimal" and "custom".
# Default is "custom". Sensible defaults are built in.
inference_level = "custom"

# Exclude features containing "unstable"
exclude_unstable_features = true

# Exclude the "std" feature
exclude_std_feature = true

# Detailed dependencies with features vs simple `name = "version"`
use_detailed_dependencies = true

# Features that should always be included if present, e.g. `derive`
always_include_features = ["derive"]

# Exclude releases with pre-release markers such as -beta.
exclude_prerelease = true

# Features that should always be excluded
global_excluded_features = [
    "default",
    "experimental",
    "unstable",
    "nightly",
    "sqlite",
]
# Always include these features even if they match exclude patterns
always_include_features = ["derive"]
# Crate-specific feature handling
[dependencies.feature_overrides.async-std]
excluded_features = [""]
required_features = ["attributes"]
default_features = true

[dependencies.feature_overrides.clap]
excluded_features = [""]
required_features = ["cargo"]
default_features = true

[dependencies.feature_overrides.hyper]
excluded_features = [""]
required_features = ["full"]
default_features = true

[dependencies.feature_overrides.iced]
excluded_features = [""]
required_features = ["image", "debug"]
default_features = true

[dependencies.feature_overrides.nanorand]
excluded_features = [""]
required_features = ["getrandom"]
default_features = true

[dependencies.feature_overrides.nu-ansi-term]
excluded_features = [""]
required_features = ["derive_serde_style"]
default_features = true

[dependencies.feature_overrides.owo-colors]
excluded_features = [""]
required_features = ["supports-colors"]
default_features = true

[dependencies.feature_overrides.proc-macro2]
excluded_features = [""]
required_features = ["span-locations"]
default_features = true

[dependencies.feature_overrides.ratatui]
excluded_features = [""]
required_features = ["crossterm"]
default_features = true

[dependencies.feature_overrides.reqwest]
excluded_features = [""]
required_features = ["blocking", "json"]
default_features = true

[dependencies.feature_overrides.rug]
excluded_features = [""]
required_features = ["integer", "std"]
default_features = true

[dependencies.feature_overrides.rustyline]
excluded_features = ["with-sqlite-history"]
required_features = [""]
default_features = true

[dependencies.feature_overrides.spin1]
excluded_features = [""]
required_features = ["mutex"]
default_features = true

[dependencies.feature_overrides.strum]
excluded_features = [""]
required_features = ["derive"]
default_features = true

[dependencies.feature_overrides.syn]
excluded_features = [""]
required_features = [
    "extra-traits",
    "fold",
    "full",
    "parsing",
    "visit",
    "visit-mut",
]
default_features = false

[dependencies.feature_overrides.tokio]
excluded_features = ["unstable-async-driver"]
required_features = ["full"]
default_features = true

[dependencies.feature_overrides.tui-textarea]
excluded_features = [""]
required_features = ["crossterm", "search"]
default_features = true

[dependencies.feature_overrides.winapi]
excluded_features = [""]
required_features = ["consoleapi", "processenv", "winbase"]
default_features = true

[misc]
# User's preferred text unquote behaviour. By default, thag_rs will not strip double quotes
# from text values returned by snippets. Setting this to true will override this behaviour.
# In turn, this user default may be overridden on the command line by specifying --unquote
# (-u) true/false (default true).
# This behaviour only applies to snippets that explicitly or implicitly return a string
# value. It does not affect well-formed programs or println! statements in snippets.
# Valid values are: "true" or "false" (default).
unquote = "true"
