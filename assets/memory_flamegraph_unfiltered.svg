<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="254" onload="init(evt)" viewBox="0 0 1200 254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#f8f8f8" offset="5%"/><stop stop-color="#e8e8e8" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.5; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Memory Profile Flamegraph (Aggregated)</text><text id="subtitle" x="50.0000%" y="48.00">thag-20250521-153906-memory.folded  Started: 2025-05-21 15:39:06  Total Bytes Allocated: 1,131,747 Peak: 525,735</text><text id="details" fill="rgb(0,0,0)" x="10" y="237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="237.00"> </text><svg id="frames" x="10" width="1180" total_samples="1131747"><g><title>thag_rs::builder::BuildState::create_initial_state (4,943 bytes, 0.44%)</title><rect x="46.4580%" y="157" width="0.4368%" height="15" fill="rgb(198,198,58)" fg:x="525787" fg:w="4943"/><text x="46.7080%" y="167.50"></text></g><g><title>thag_rs::config::maybe_config (4,913 bytes, 0.43%)</title><rect x="46.4606%" y="141" width="0.4341%" height="15" fill="rgb(226,226,68)" fg:x="525817" fg:w="4913"/><text x="46.7106%" y="151.50"></text></g><g><title>thag_rs::builder::BuildState::extract_script_info (173 bytes, 0.02%)</title><rect x="46.8948%" y="157" width="0.0153%" height="15" fill="rgb(194,194,57)" fg:x="530730" fg:w="173"/><text x="47.1448%" y="167.50"></text></g><g><title>thag_rs::builder::ScriptState::get_script (71 bytes, 0.01%)</title><rect x="46.9038%" y="141" width="0.0063%" height="15" fill="rgb(220,220,66)" fg:x="530832" fg:w="71"/><text x="47.1538%" y="151.50"></text></g><g><title>thag_rs::builder::BuildState::set_up_paths (1,548 bytes, 0.14%)</title><rect x="46.9100%" y="157" width="0.1368%" height="15" fill="rgb(225,225,68)" fg:x="530903" fg:w="1548"/><text x="47.1600%" y="167.50"></text></g><g><title>thag_rs::builder::ScriptState::get_script_dir_path (112 bytes, 0.01%)</title><rect x="47.0369%" y="141" width="0.0099%" height="15" fill="rgb(204,204,60)" fg:x="532339" fg:w="112"/><text x="47.2869%" y="151.50"></text></g><g><title>thag_rs::builder::BuildState::pre_configure (6,716 bytes, 0.59%)</title><rect x="46.4534%" y="173" width="0.5934%" height="15" fill="rgb(227,227,69)" fg:x="525735" fg:w="6716"/><text x="46.7034%" y="183.50"></text></g><g><title>thag_rs::builder::log_init_setup (208 bytes, 0.02%)</title><rect x="47.0468%" y="173" width="0.0184%" height="15" fill="rgb(191,191,55)" fg:x="532451" fg:w="208"/><text x="47.2968%" y="183.50"></text></g><g><title>thag_rs::shared::debug_timings (52 bytes, 0.00%)</title><rect x="47.0606%" y="157" width="0.0046%" height="15" fill="rgb(179,179,51)" fg:x="532607" fg:w="52"/><text x="47.3106%" y="167.50"></text></g><g><title>thag_rs::builder::resolve_script_dir_path (56 bytes, 0.00%)</title><rect x="47.0652%" y="173" width="0.0049%" height="15" fill="rgb(204,204,60)" fg:x="532659" fg:w="56"/><text x="47.3152%" y="183.50"></text></g><g><title>thag_rs::builder::set_script_state (71 bytes, 0.01%)</title><rect x="47.0701%" y="173" width="0.0063%" height="15" fill="rgb(215,215,64)" fg:x="532715" fg:w="71"/><text x="47.3201%" y="183.50"></text></g><g><title>thag_rs::cmd_args::get_args (72,127 bytes, 6.37%)</title><rect x="47.0764%" y="173" width="6.3731%" height="15" fill="rgb(214,214,64)" fg:x="532786" fg:w="72127"/><text x="47.3264%" y="183.50">thag_rs:..</text></g><g><title>thag_rs::cmd_args::get_proc_flags (4,969 bytes, 0.44%)</title><rect x="53.4495%" y="173" width="0.4391%" height="15" fill="rgb(226,226,68)" fg:x="604913" fg:w="4969"/><text x="53.6995%" y="183.50"></text></g><g><title>thag_rs::config::maybe_config (4,913 bytes, 0.43%)</title><rect x="53.4544%" y="157" width="0.4341%" height="15" fill="rgb(202,202,60)" fg:x="604969" fg:w="4913"/><text x="53.7044%" y="167.50"></text></g><g><title>thag_rs::config::Config::load_or_create_default (273,146 bytes, 24.13%)</title><rect x="54.3227%" y="141" width="24.1349%" height="15" fill="rgb(198,198,58)" fg:x="614795" fg:w="273146"/><text x="54.5727%" y="151.50">thag_rs::config::Config::load_or_creat..</text></g><g><title>thag_rs::config::Config::load (273,008 bytes, 24.12%)</title><rect x="54.3348%" y="125" width="24.1227%" height="15" fill="rgb(177,177,50)" fg:x="614933" fg:w="273008"/><text x="54.5848%" y="135.50">thag_rs::config::Config::load</text></g><g><title>thag_rs::config::validate_config_format (133,840 bytes, 11.83%)</title><rect x="66.6316%" y="109" width="11.8260%" height="15" fill="rgb(209,209,62)" fg:x="754101" fg:w="133840"/><text x="66.8816%" y="119.50">thag_rs::config::v..</text></g><g><title>thag_rs::config::maybe_config (278,433 bytes, 24.60%)</title><rect x="53.8885%" y="157" width="24.6021%" height="15" fill="rgb(198,198,58)" fg:x="609882" fg:w="278433"/><text x="54.1385%" y="167.50">thag_rs::config::maybe_config</text></g><g><title>thag_rs::config::RealContext::new (374 bytes, 0.03%)</title><rect x="78.4576%" y="141" width="0.0330%" height="15" fill="rgb(224,224,68)" fg:x="887941" fg:w="374"/><text x="78.7076%" y="151.50"></text></g><g><title>thag_rs::shared::get_home_dir_string (341 bytes, 0.03%)</title><rect x="78.4605%" y="125" width="0.0301%" height="15" fill="rgb(214,214,64)" fg:x="887974" fg:w="341"/><text x="78.7105%" y="135.50"></text></g><g><title>thag_rs::shared::get_home_dir (330 bytes, 0.03%)</title><rect x="78.4614%" y="109" width="0.0292%" height="15" fill="rgb(205,205,61)" fg:x="887985" fg:w="330"/><text x="78.7114%" y="119.50"></text></g><g><title>thag_rs::cmd_args::set_verbosity (278,497 bytes, 24.61%)</title><rect x="53.8885%" y="173" width="24.6077%" height="15" fill="rgb(179,179,51)" fg:x="609882" fg:w="278497"/><text x="54.1385%" y="183.50">thag_rs::cmd_args::set_verbosity</text></g><g><title>thag_rs::logging::set_global_verbosity (64 bytes, 0.01%)</title><rect x="78.4906%" y="157" width="0.0057%" height="15" fill="rgb(200,200,59)" fg:x="888315" fg:w="64"/><text x="78.7406%" y="167.50"></text></g><g><title>thag_rs::logging::configure_log (18,033 bytes, 1.59%)</title><rect x="78.4963%" y="173" width="1.5934%" height="15" fill="rgb(181,181,52)" fg:x="888379" fg:w="18033"/><text x="78.7463%" y="183.50"></text></g><g><title>thag_rs::logging::configure_simplelog (18,012 bytes, 1.59%)</title><rect x="78.4981%" y="157" width="1.5915%" height="15" fill="rgb(228,228,69)" fg:x="888400" fg:w="18012"/><text x="78.7481%" y="167.50"></text></g><g><title>thag_rs::repl::add_menu_keybindings (111 bytes, 0.01%)</title><rect x="80.0896%" y="173" width="0.0098%" height="15" fill="rgb(180,180,51)" fg:x="906412" fg:w="111"/><text x="80.3396%" y="183.50"></text></g><g><title>thag_rs::repl::disp_repl_banner (1,620 bytes, 0.14%)</title><rect x="80.0994%" y="157" width="0.1431%" height="15" fill="rgb(180,180,52)" fg:x="906523" fg:w="1620"/><text x="80.3494%" y="167.50"></text></g><g><title>thag_rs::styling::Style::paint (1,620 bytes, 0.14%)</title><rect x="80.0994%" y="141" width="0.1431%" height="15" fill="rgb(176,176,50)" fg:x="906523" fg:w="1620"/><text x="80.3494%" y="151.50"></text></g><g><title>thag_rs::repl::format_edit_commands (27,703 bytes, 2.45%)</title><rect x="80.9593%" y="141" width="2.4478%" height="15" fill="rgb(194,194,57)" fg:x="916255" fg:w="27703"/><text x="81.2093%" y="151.50">th..</text></g><g><title>thag_rs::repl::format_cmd_desc (18,124 bytes, 1.60%)</title><rect x="81.8057%" y="125" width="1.6014%" height="15" fill="rgb(191,191,56)" fg:x="925834" fg:w="18124"/><text x="82.0557%" y="135.50"></text></g><g><title>thag_rs::styling::Style::paint (4,770 bytes, 0.42%)</title><rect x="82.9857%" y="109" width="0.4215%" height="15" fill="rgb(191,191,55)" fg:x="939188" fg:w="4770"/><text x="83.2357%" y="119.50"></text></g><g><title>thag_rs::repl::format_bindings (41,255 bytes, 3.65%)</title><rect x="80.2426%" y="157" width="3.6452%" height="15" fill="rgb(219,219,66)" fg:x="908143" fg:w="41255"/><text x="80.4926%" y="167.50">thag..</text></g><g><title>thag_rs::repl::format_non_edit_events (5,440 bytes, 0.48%)</title><rect x="83.4072%" y="141" width="0.4807%" height="15" fill="rgb(202,202,59)" fg:x="943958" fg:w="5440"/><text x="83.6572%" y="151.50"></text></g><g><title>thag_rs::styling::Style::paint (911 bytes, 0.08%)</title><rect x="83.8073%" y="125" width="0.0805%" height="15" fill="rgb(221,221,66)" fg:x="948487" fg:w="911"/><text x="84.0573%" y="135.50"></text></g><g><title>thag_rs::repl::format_key_code (373 bytes, 0.03%)</title><rect x="83.8878%" y="157" width="0.0330%" height="15" fill="rgb(200,200,59)" fg:x="949398" fg:w="373"/><text x="84.1378%" y="167.50"></text></g><g><title>thag_rs::repl::format_key_modifier (4,020 bytes, 0.36%)</title><rect x="83.9208%" y="157" width="0.3552%" height="15" fill="rgb(216,216,65)" fg:x="949771" fg:w="4020"/><text x="84.1708%" y="167.50"></text></g><g><title>thag_rs::repl::get_max_cmd_len (7,845 bytes, 0.69%)</title><rect x="84.2760%" y="157" width="0.6932%" height="15" fill="rgb(202,202,59)" fg:x="953791" fg:w="7845"/><text x="84.5260%" y="167.50"></text></g><g><title>thag_rs::styling::Style::paint (5,681 bytes, 0.50%)</title><rect x="84.4672%" y="141" width="0.5020%" height="15" fill="rgb(213,213,63)" fg:x="955955" fg:w="5681"/><text x="84.7172%" y="151.50"></text></g><g><title>thag_rs::repl::get_max_key_len (3,958 bytes, 0.35%)</title><rect x="84.9692%" y="157" width="0.3497%" height="15" fill="rgb(216,216,65)" fg:x="961636" fg:w="3958"/><text x="85.2192%" y="167.50"></text></g><g><title>thag_rs::styling::Style::paint (3,958 bytes, 0.35%)</title><rect x="84.9692%" y="141" width="0.3497%" height="15" fill="rgb(180,180,52)" fg:x="961636" fg:w="3958"/><text x="85.2192%" y="151.50"></text></g><g><title>thag_rs::repl::parse_line (14,901 bytes, 1.32%)</title><rect x="85.3189%" y="157" width="1.3166%" height="15" fill="rgb(203,203,60)" fg:x="965594" fg:w="14901"/><text x="85.5689%" y="167.50"></text></g><g><title>thag_rs::repl::run_repl (73,972 bytes, 6.54%)</title><rect x="80.0994%" y="173" width="6.5361%" height="15" fill="rgb(192,192,56)" fg:x="906523" fg:w="73972"/><text x="80.3494%" y="183.50">thag_rs::..</text></g><g><title>thag_rs::shared::debug_timings (116 bytes, 0.01%)</title><rect x="86.6355%" y="173" width="0.0102%" height="15" fill="rgb(191,191,56)" fg:x="980495" fg:w="116"/><text x="86.8855%" y="183.50"></text></g><g><title>thag_rs::config::maybe_config (4,913 bytes, 0.43%)</title><rect x="86.8100%" y="157" width="0.4341%" height="15" fill="rgb(205,205,60)" fg:x="982470" fg:w="4913"/><text x="87.0600%" y="167.50"></text></g><g><title>thag_rs::config::maybe_config (4,913 bytes, 0.43%)</title><rect x="87.5446%" y="141" width="0.4341%" height="15" fill="rgb(183,183,53)" fg:x="990783" fg:w="4913"/><text x="87.7946%" y="151.50"></text></g><g><title>thag_rs::styling::ColorInfo::rgb (532 bytes, 0.05%)</title><rect x="97.8787%" y="61" width="0.0470%" height="15" fill="rgb(204,204,60)" fg:x="1107739" fg:w="532"/><text x="98.1287%" y="71.50"></text></g><g><title>thag_rs::styling::Style::from_config (532 bytes, 0.05%)</title><rect x="97.8787%" y="77" width="0.0470%" height="15" fill="rgb(178,178,51)" fg:x="1107739" fg:w="532"/><text x="98.1287%" y="87.50"></text></g><g><title>thag_rs::styling::Theme::get_theme_with_color_support (112,575 bytes, 9.95%)</title><rect x="87.9787%" y="141" width="9.9470%" height="15" fill="rgb(206,206,61)" fg:x="995696" fg:w="112575"/><text x="88.2287%" y="151.50">thag_rs::styli..</text></g><g><title>thag_rs::styling::Theme::get_builtin (112,575 bytes, 9.95%)</title><rect x="87.9787%" y="125" width="9.9470%" height="15" fill="rgb(186,186,54)" fg:x="995696" fg:w="112575"/><text x="88.2287%" y="135.50">thag_rs::styli..</text></g><g><title>thag_rs::styling::Theme::from_toml (112,575 bytes, 9.95%)</title><rect x="87.9787%" y="109" width="9.9470%" height="15" fill="rgb(218,218,65)" fg:x="995696" fg:w="112575"/><text x="88.2287%" y="119.50">thag_rs::styli..</text></g><g><title>thag_rs::styling::Theme::from_definition (606 bytes, 0.05%)</title><rect x="97.8721%" y="93" width="0.0535%" height="15" fill="rgb(178,178,51)" fg:x="1107665" fg:w="606"/><text x="98.1221%" y="103.50"></text></g><g><title>thag_rs::styling::Theme::auto_detect (120,888 bytes, 10.68%)</title><rect x="87.2441%" y="157" width="10.6815%" height="15" fill="rgb(229,229,69)" fg:x="987383" fg:w="120888"/><text x="87.4941%" y="167.50">thag_rs::styling..</text></g><g><title>thag_rs::terminal::get_term_bg_rgb_unguarded (23,309 bytes, 2.06%)</title><rect x="97.9348%" y="141" width="2.0596%" height="15" fill="rgb(188,188,54)" fg:x="1108374" fg:w="23309"/><text x="98.1848%" y="151.50">t..</text></g><g><title>thag_rs::terminal::detect_term_capabilities (23,476 bytes, 2.07%)</title><rect x="97.9257%" y="157" width="2.0743%" height="15" fill="rgb(177,177,50)" fg:x="1108271" fg:w="23476"/><text x="98.1757%" y="167.50">t..</text></g><g><title>thag_rs::terminal::reset_terminal_state (64 bytes, 0.01%)</title><rect x="99.9943%" y="141" width="0.0057%" height="15" fill="rgb(189,189,55)" fg:x="1131683" fg:w="64"/><text x="100.2443%" y="151.50"></text></g><g><title>all (1,131,747 bytes, 100%)</title><rect x="0.0000%" y="205" width="100.0000%" height="15" fill="rgb(204,204,60)" fg:x="0" fg:w="1131747"/><text x="0.2500%" y="215.50"></text></g><g><title>thag::main (1,131,747 bytes, 100.00%)</title><rect x="0.0000%" y="189" width="100.0000%" height="15" fill="rgb(201,201,59)" fg:x="0" fg:w="1131747"/><text x="0.2500%" y="199.50">thag::main</text></g><g><title>thag_rs::styling::TermAttributes::initialize (151,136 bytes, 13.35%)</title><rect x="86.6458%" y="173" width="13.3542%" height="15" fill="rgb(179,179,51)" fg:x="980611" fg:w="151136"/><text x="86.8958%" y="183.50">thag_rs::styling::Te..</text></g></svg></svg>