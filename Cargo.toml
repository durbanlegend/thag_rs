[package]
description = "A versatile cross-platform playground and REPL for Rust snippets, expressions and programs.\nAccepts a script file or dynamic options."
name = "thag_rs"
version = "0.2.0"
authors = ["Don Forbes <don.forbes3@gmail.com>"]
edition = "2021"
license = "MIT OR Apache-2.0"
# Include the demo directory in the crate packagename = "thag_rs"
include = [
  "Cargo.toml",
  "README.md",
  "LICENSE-APACHE",
  "LICENSE-MIT",
  "assets/default_config.toml",
  "build.rs",
  "demo/**",
  "src/**",
  "tests/**",
]
default-run = "thag"
readme = "README.md"
repository = "https://github.com/durbanlegend/thag_rs"
categories = ["command-line-utilities", "development-tools::build-utils"]
keywords = ["REPL", "eval", "playground", "runner", "script"]
rust-version = "1.82"

[package.metadata.wix]
upgrade-guid = "FA5CCD40-AB09-488D-817D-867B69E10F7B"
path-guid = "CCDE9D5F-06C2-42C2-8BF7-6EB41E46A496"
license = false
eula = false

[package.metadata.docs.rs]
# features = ["document-features"]
all-features = true

[workspace]
members = [
  # "demo/proc_macros",
  "thag_common",
  "thag_demo",
  "thag_proc_macros",
  "thag_profiler",
  "thag_styling",
]

[lib]
name = "thag_rs"
path = "src/lib.rs"

[[bin]]
name = "thag"
path = "src/bin/thag_rs.rs"

# Add these [[bin]] sections after your existing thag binary
[[bin]]
name = "thag_ast"
path = "src/bin/thag_ast.rs"
required-features = ["tools"]

[[bin]]
name = "thag_cargo"
path = "src/bin/thag_cargo.rs"
required-features = ["tools"]

[[bin]]
name = "thag_clippy"
path = "src/bin/thag_clippy.rs"
required-features = ["tools"]

[[bin]]
name = "thag_demo_help"
path = "src/bin/thag_demo_help.rs"
required-features = ["tools"]

[[bin]]
name = "thag_migrate_tool"
path = "src/bin/thag_migrate_tool.rs"
required-features = ["tools"]

[[bin]]
name = "thag_convert_themes"
path = "src/bin/thag_convert_themes.rs"
required-features = ["tools"]

[[bin]]
name = "thag_convert_themes_alt"
path = "src/bin/thag_convert_themes_alt.rs"
required-features = ["tools"]

[[bin]]
name = "thag_copy"
path = "src/bin/thag_copy.rs"
required-features = ["tools"]

[[bin]]
name = "thag_detect_term"
path = "src/bin/thag_detect_term.rs"
required-features = ["tools"]

[[bin]]
name = "thag_edit_theme"
path = "src/bin/thag_edit_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_expand"
path = "src/bin/thag_expand.rs"
required-features = ["tools"]

[[bin]]
name = "thag_find_demos"
path = "src/bin/thag_find_demos.rs"
required-features = ["tools"]

[[bin]]
name = "thag_from_rust_script"
path = "src/bin/thag_from_rust_script.rs"
required-features = ["tools"]

[[bin]]
name = "thag_gen_config"
path = "src/bin/thag_gen_config.rs"
required-features = ["tools"]

[[bin]]
name = "thag_gen_errors"
path = "src/bin/thag_gen_errors.rs"
required-features = ["tools"]

[[bin]]
name = "thag_gen_proc_macro_readme"
path = "src/bin/thag_gen_proc_macro_readme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_gen_readme"
path = "src/bin/thag_gen_readme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_get_demo_dir"
path = "src/bin/thag_get_demo_dir.rs"
required-features = ["tools"]

[[bin]]
name = "thag_legible"
path = "src/bin/thag_legible.rs"
required-features = ["tools"]

[[bin]]
name = "thag_markdown"
path = "src/bin/thag_markdown.rs"
required-features = ["tools"]

[[bin]]
name = "thag_paste"
path = "src/bin/thag_paste.rs"
required-features = ["tools"]

[[bin]]
name = "thag_show_themes"
path = "src/bin/thag_show_themes.rs"
required-features = ["tools"]

[[bin]]
name = "thag_theme"
path = "src/bin/thag_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_to_rust_script"
path = "src/bin/thag_to_rust_script.rs"
required-features = ["tools"]

[[bin]]
name = "thag_url"
path = "src/bin/thag_url.rs"
required-features = ["tools"]

[[bin]]
name = "thag_prompt"
path = "src/bin/thag_prompt.rs"
required-features = ["tools"]

[[bin]]
name = "thag_image_to_theme"
path = "src/bin/thag_image_to_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_gen_terminal_themes"
path = "src/bin/thag_gen_terminal_themes.rs"
required-features = ["tools"]

[[bin]]
name = "thag_palette"
path = "src/bin/thag_palette.rs"
required-features = ["tools"]

[[bin]]
name = "thag_palette_vs_theme"
path = "src/bin/thag_palette_vs_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_alacritty_add_theme"
path = "src/bin/thag_alacritty_add_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_winterm_add_theme"
path = "src/bin/thag_winterm_add_theme.rs"
required-features = ["tools"]

[[bin]]
name = "thag_mintty_add_theme"
path = "src/bin/thag_mintty_add_theme.rs"
required-features = ["tools"]

# [[bin]]
# name = "thag_profile_benchmark"
# path = "src/bin/thag_profile_benchmark.rs"
# required-features = ["tools"]

[[bench]]
harness = false
name = "filter_bench"

[dependencies]
anyhow = { version = "1.0", optional = true }
arboard = { version = "3.4", optional = true }
atty = { version = "0.2", optional = true }
backtrace = "0.3"
bitflags = { version = "2.9", optional = true }
cargo-lookup = { version = "0.1", optional = true }
cargo_toml = { version = "0.22", optional = true }
chrono = "0.4"
clap = { version = "4.5", features = ["cargo", "derive"], optional = true }
colored = { version = "3.0", optional = true }
convert_case = { version = "0.8", optional = true }
# NB: Required for stdin -d. Must align version with ratatui::crossterm
crossterm = { version = "0.28", features = ["use-dev-tty"] }
dhat = { version = "0.3", optional = true }
dirs = "6.0"
document-features = { version = "0.2", optional = true }
documented = "0.9"
edit = { version = "0.1", optional = true }
heck = { version = "0.5", optional = true }
inquire = { version = "0.9", optional = true }
log = "0.4"
mockall = { version = "0.13", optional = true }
nu-ansi-term = { version = "0.50", optional = true }
pathdiff = { version = "0.2", optional = true }
phf = { version = "0.12", features = ["macros"] }
prettyplease = { version = "0.2", optional = true }
proc-macro2 = "1.0"
quote = { version = "1.0", optional = true }
ratatui = { version = "0.29", optional = true }
reedline = { version = "0.43", optional = true }
regex = "1.11"
reqwest = { version = "0.12", features = ["blocking", "json", "rustls-tls"], default-features = false, optional = true }
scopeguard = { version = "1.2", optional = true }
semver = "1.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0", optional = true }
serde_merge = { version = "0.1", optional = true }
serde_yaml_ok = { version = "0.9", optional = true }
side-by-side-diff = { version = "0.1", optional = true }
simplelog = { version = "0.12", optional = true }
strict = "0.2"
strum = { version = "0.27", features = ["derive", "phf"] }
syn = { version = "2", features = [
  "extra-traits",
  "full",
  "visit",
  "visit-mut",
], optional = true }
tempfile = { version = "3.20", optional = true }
termbg = { version = "0.6", optional = true }
terminal-light = { version = "1.8", optional = true }
thag_common = { path = "thag_common", version = "0.2" }
thag_proc_macros = { path = "thag_proc_macros", version = "0.2" }
thag_profiler = { path = "thag_profiler", version = "0.1", optional = true }
thag_styling = { path = "thag_styling", version = "0.2", default-features = false, optional = true }
tinyget = { version = "1.0", features = ["https"], optional = true }
tokio = { version = "1.36", features = [
  "macros",
  "rt-multi-thread",
  "time",
], optional = true }
toml = "0.9"
toml_edit = { version = "0.23", optional = true }
# `tui-textarea` is used for the `tui` feature`.
tui-textarea = { version = "0.7", features = [
  "crossterm",
  "search",
], optional = true }
url = { version = "2.5", optional = true }
warp = { version = "0.4", features = ["server"], optional = true }

[dev-dependencies]
assert_cmd = "2.0"
criterion = "0.7"
either = "1.15"
env_logger = "0.11"
lazy_static = "1.5"
once_cell = "1.21"
predicates = "3.1"
serial_test = "3.2"
tempfile = "3.19"
test-generator = "0.3"
tokio = { version = "1.36", features = ["macros", "rt", "time"] }

[build-dependencies]
phf = { version = "0.12", features = ["macros"] }
tempfile = "3.20"
thag_proc_macros = { path = "thag_proc_macros", version = "0.2" }
toml = "0.9"

[target.'cfg(windows)'.dependencies]
win32console = "0.1"
winapi = "0.3"

[features]
#! <br><br>
#! The following features are supported:

## Default features: full and `simplelog`
default = ["full", "simplelog"]  # Full features with simplelog

## AST and Parsing
ast = [
  "core",  # Explicit dependency on core for logging
  "profiling",  # As long as we have instrumentation at this level
  "quote",
  "syn",
]

## Build and Analysis
build = [
  "ast",  # For syntax parsing
  "bitflags",
  "cargo-lookup",
  "cargo_toml",
  "clap",
  "config",  # For terminal support
  "prettyplease",
  "ratatui",
  "serde_merge",
  "side-by-side-diff",
]

## Clipboard support
clipboard = ["dep:arboard"]

## Terminal color support
color_detect = [
  "config",
  "ratatui",
  "scopeguard",
  "termbg",
  "thag_styling/color_detect",
]

## Configuration
config = ["core", "edit", "mockall", "thag_styling/config", "toml_edit"]

## Core and Logging Features
core = [
  "error_handling",
  "thag_styling",
]  # Foundation for all features

## Optional/Debug Features
debug_logging = []

## Documentation features
document-features = ["dep:document-features"]

## Error handling
error_handling = []

## All features
full = ["color_detect", "repl"]  # Simplified as repl includes everything
nightly = []
no_format_snippet = []
# dhat-heap = ["dep:dhat"]
pathdiff = ["dep:pathdiff"]
profiling = ["thag_proc_macros/full_profiling", "thag_profiler/full_profiling"]

## REPL capability
repl = [
  "nu-ansi-term",
  "reedline",
  "thag_styling/crossterm_support",
  "thag_styling/nu_ansi_term_support",
  "tui",  # Includes all TUI features
]

## `simplelog` crate
simplelog = ["dep:simplelog"]
terminal-light = ["dep:terminal-light"]

## Tools feature - includes all dependencies needed by tools
tools = [
  "clipboard",
  "dep:anyhow",
  "dep:atty",
  "dep:colored",
  "dep:convert_case",
  "dep:heck",
  "dep:inquire",
  "dep:pathdiff",
  "dep:reqwest",
  "dep:serde_yaml_ok",
  "dep:simplelog",
  "dep:tempfile",
  "dep:terminal-light",
  "dep:tinyget",
  "dep:tokio",
  "dep:url",
  "dep:warp",
  "thag_styling/full",
]

## TUI editing
tui = [
  "build",  # Full build capabilities
  "scopeguard",
  "serde_json",
  "thag_proc_macros/tui",
  "thag_styling/ratatui_support",
  "tui-textarea",
]  # UI Features

# Feature dependency tree:
#
# default
# ├── simplelog
# └── full
#     ├── repl
#     │   └── tui
#     │    |  ├── build
#     │    |  │   ├── ast
#     │    |  │   │   ├── core  ★                # Fundamental feature set
#     │    |  │   │   │   ├── error_handling     # Error types and handling
#     │    |  │   │   │   └── styling            # Basic terminal styling
#     │    |  │   │   ├── profiling              # As long as we use instrumentation at this level
#     │    |  │   │   ├── quote
#     │    |  │   │   └── syn
#     │    |  │   ├── config
#     │    |  │   │   ├── core  ★ (shared)       # Core features required here too
#     │    |  │   │   ├── mockall
#     │    |  │   │   ├── serde_with
#     │    |  │   │   └── toml_edit
#     │    |  │   └── ratatui                    # TUI framework (shared with color_detect)
#     │    |  │
#     │    |  ├── tui-textarea                   # Text editing widget
#     │    |  ├── serde_json                     # JSON support
#     │    |  └── scopeguard                     # Resource cleanup (shared with color_detect)
#     │    |
#     │    └── nu-ansi-term
#     │    └── reedline
#     │
#     └── color_detect     # Optional terminal detection, only included in full
#         ├── config
#         ├── ratatui      # TUI framework (shared with build)
#         ├── scopeguard   # (shared with tui)
#         └── termbg
#         └── thag_styling/color_detect
#
# Core Feature Set (★):
# - Basic logging and error handling
# - Essential macros: cprtln, debug_log, lazy_static_var, vlog, regex
# - Styling system and macros: cvprtln, style_for_role
# - Fundamental types and traits
#
# Optional features:
# - profiling     # Enables profiling via thag_profiler (for internal use)
# - debug_logging
# - nightly
# - no_format_snippet
#
# Common Usage Patterns:
# 1. Just core functionality:
#    features = ["core", "simplelog"]
#
# 2. Core with profiling enabled:
#    features = ["core", "simplelog", "profiling"]
#
# 3. Core with color detection:
#    features = ["core", "color_detect", "simplelog"]
#
# 4. Full functionality with profiling:
#    features = ["full", "simplelog", "profiling"]
#
# Optional features can be added at any level:
# - debug_logging
# - nightly
# - no_format_snippet
# - profiling
#
# Note: When using without default features, must specify a logging implementation:
# cargo add thag_rs --no-default-features --features="repl,simplelog"
# or
# cargo add thag_rs --no-default-features --features="repl,env_logger"

[lints.clippy]
uninlined_format_args = "allow"

[profile.dev]
# opt-level = 1            # Use slightly better optimizations.
debug = true
debug-assertions = true
incremental = true

[profile.release]
debug = false

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"
