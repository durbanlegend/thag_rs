[package]
description = "A versatile cross-platform script runner and REPL for Rust snippets, expressions and programs.\nAccepts a script file or dynamic options."
name = "thag_rs"
version = "0.1.9"
authors = ["Don Forbes <don.forbes3@gmail.com>"]
edition = "2021"
license = "MIT OR Apache-2.0"
# Include the demo directory in the crate packagename = "thag_rs"
include = [
    "assets/default_config.toml",
    "src/**",
    "Cargo.toml",
    "README.md",
    "build.rs",
    "demo/**",
    "tests/**",
]
readme = "README.md"
repository = "https://github.com/durbanlegend/thag_rs"
categories = ["command-line-utilities", "development-tools::build-utils"]
keywords = ["REPL", "command-line", "eval", "runner", "script"]

[package.metadata.wix]
upgrade-guid = "FA5CCD40-AB09-488D-817D-867B69E10F7B"
path-guid = "CCDE9D5F-06C2-42C2-8BF7-6EB41E46A496"
license = false
eula = false

[dependencies]
bitflags = { version = "2.6.0", optional = true }
cargo-lookup = { version = "0.1.0", optional = true }
cargo_toml = { version = "0.21.0", optional = true }
clap = { version = "4.5.23", features = ["cargo", "derive"], optional = true }
crokey = { version = "1.1.0", optional = true }
crossterm = { version = "0.28.1", features = ["use-dev-tty"], optional = true }
documented = "0.9.1"
edit = { version = "0.1.5", optional = true }
env_logger = { version = "0.11.5", optional = true }
toml = { version = "0.8.19", optional = true }
log = "0.4.22"
mockall = { version = "0.13.1", optional = true }
nu-ansi-term = { version = "0.50.1", optional = true }
phf = "0.11.2"
prettyplease = { version = "0.2.25", optional = true }
proc-macro2 = "1.0.92"
quote = { version = "1.0.37", optional = true }
ratatui = { version = "0.29.0", optional = true }
reedline = { version = "0.37.0", optional = true }
regex = "1.11.1"
scopeguard = { version = "1.2.0", optional = true }
semver = "1.0.23"
serde = { version = "1.0.215", features = ["derive"] }
serde_json = { version = "1.0.133", optional = true }
serde_merge = { version = "0.1.3", optional = true }
serde_with = { version = "3.11.0", optional = true }
side-by-side-diff = { version = "0.1.2", optional = true }
simplelog = { version = "0.12.2", optional = true }
# strict = "0.2.0"
strum = { version = "0.26.3", features = ["derive", "phf"] }
supports-color = { version = "3.0.2", optional = true }
syn = { version = "2.0.90", features = [
    "extra-traits",
    "full",
    "visit",
    "visit-mut",
], optional = true }
termbg = { version = "0.6.1", optional = true }
thag_proc_macros = { version = "0.1.1", path = "src/proc_macros" }
toml_edit = { version = "0.22.22", optional = true }
# `tui-textarea` is used for the `tui` feature`.
tui-textarea = { version = "0.7", features = [
    "crossterm",
    "search",
], optional = true }
document-features = "0.2.10"
directories = "5.0.1"

[target.'cfg(windows)'.dependencies]
win32console = "0.1.5"
winapi = "0.3.9"

[profile.dev]
opt-level = 1           # Use slightly better optimizations.
debug = true
debug-assertions = true
incremental = true

[profile.release]
debug = false

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[lib]
name = "thag_rs"
path = "src/lib.rs"

[[bin]]
name = "thag"
path = "src/bin/thag_rs.rs"

[features]

## Fringe feature enables debug logging.
debug-logs = []

## Fringe feature enables nightly Rust.
nightly = []

## Fringe feature enables formatting the code generated for a snippet, at the cost of some processing time.
format_snippet = []

## By default, `thag_rs` includes the full range of features and the `simplelog` crate (in lieu of `env_logger`).
default = ["full", "simplelog"]

## Full house with fringe exceptions - combines the `build`, `color_support`, `core`, `repl` and `tui` features.
full = ["build", "color_support", "core", "repl", "tui"]

# Logging features - these are mutually exclusive
## Choice of `simplelog` vs. `env_logger`.
simplelog = ["dep:simplelog", "log_impl"]

## Choice of `env_logger` vs. `simplelog`.
env_logger = ["dep:env_logger", "log_impl"]

# Private feature to ensure only one logger is selected
## Logging with either `simplelog` or `env_logger`.
log_impl = []

# Core features
## Combines the `error_handling` and `log_impl` features.
## Gives access to basic logging, error handling and profiling, including the following macros:
## `cprtln`, `debug_log`, `lazy_static_var`, `profile`, `profile_method`, `profile_method_detailed`, `profile_section`, `regex`, `vlog`.
core = ["error_handling", "log_impl"] # Always available

## `ThagError` and `ThagResult` for handling errors consistently.
error_handling = []

# ## Fringe feature enables `thag_rs` basic lightweight profiling.
profiling = []

## Abstract Syntax Tree (`syn`) and dependency inference features.
## Extends the `core` features and involves the `nu-ansi-term`, `quote` and `syn` dependencies.
ast = ["core", "nu-ansi-term", "quote", "syn"] # Simple script running

## Message colouring tailored to a choice of 9 message levels, in combination with your terminal's capabilities and current theme. Gives access to the `cvprtln` macro.
## Involves the following dependencies: `crossterm`, `edit`, `core`, `mockall`, `nu-ansi-term`, `scopeguard`, `serde_with`, `supports-color`, `termbg`, `toml` and `toml_edit`.
color_support = [
    "crossterm",
    "edit",
    "core",
    "mockall",
    "nu-ansi-term",
    "scopeguard",
    "serde_with",
    "supports-color",
    "termbg",
    "toml",
    "toml_edit",
]
# basic_color = [] # Simple ANSI colors for minimal builds

## Full build features. Involves the `color_support` and `core` features, and the following dependencies:
## `bitflags`, `cargo-lookup`, `cargo_toml`, `clap`, `prettyplease`, `quote`, `serde_merge`, `side-by-side-diff` and `syn`.
build = [
    "bitflags",
    "cargo-lookup",
    "cargo_toml",
    "clap",
    "color_support",
    "core",
    "prettyplease",
    "quote",
    "serde_merge",
    "side-by-side-diff",
    "syn",
] # Full dependency analysis

# Advanced features
## Provides a basic TUI editor with file_backed history for paste-and-run, stdin or promoted REPL expressions.
## Involves the `build` feature and the following dependencies:
## `crokey`, `edit`, `ratatui`, `serde_json` and `tui-textarea`.
tui = ["crokey", "edit", "build", "ratatui", "serde_json", "tui-textarea"]

## Provides a REPL function with file_backed history and the possibility to promote expressions to snippets and
## from there save them as scripts if desired.
## Involves the `tui` feature and the `reedline` dependency.
repl = ["reedline", "tui"]
# file_dialog = ["tui"]

# Optional integrations
# clipboard = ["arboard"]

[package.metadata.cargo-features-validate]
# Additional validation that logging feature is satisfied
requires-any = [["simplelog", "env_logger"]]

[dev-dependencies]
assert_cmd = "2.0.16"
criterion = "0.5.1"
either = "1.13.0"
env_logger = "0.11.5"
lazy_static = "1.5.0"
predicates = "3.1.2"
sequential-test = "0.2.4"
tempfile = "3.14.0"
test-generator = "0.3.1"

[[bench]]
name = "filter_bench"
harness = false

[workspace]
members = ["src/proc_macros"]
exclude = ["bank/proc_macros", "demo/proc_macros"]

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.21.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell", "msi"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
    "aarch64-apple-darwin",
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-gnu",
    "x86_64-unknown-linux-musl",
    "x86_64-pc-windows-msvc",
]
# Path that installers should place binaries in
install-path = "CARGO_HOME"
# Whether to install an updater program
install-updater = false
# Trigger releases manually instead of on tag-push (DHF temp)
# dispatch-releases = false
#
[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["demo.zip"]
build = ["sh", "-c", "zip demo.zip demo/*"]

[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["assets/default_config.toml"]
# no-op:
build = ["true"] # UI features
