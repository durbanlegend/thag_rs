#![allow(clippy::module_name_repetitions)]
use proc_macro::TokenStream;
use quote::quote;

pub fn category_enum_impl(_input: TokenStream) -> TokenStream {
    let expanded = quote! {
       use std::str::FromStr;
       use strum::{Display, EnumIter, EnumString, IntoEnumIterator, IntoStaticStr};

       #[derive(Debug, Clone, Copy, Display, PartialEq, Eq, EnumIter, EnumString, IntoStaticStr)]
       #[strum(serialize_all = "snake_case", use_phf)]
       enum Category {
           AST,
           CLI,
           REPL,
           Async,
           AttributeMacros,
           AttributeParsing,
           Automation,
           Basic,
           Benchmark,
           BigNumbers,
           BuilderPattern,
           Caching,
           Color,
           CompileTime,
           Configuration,
           Crates,
           Demo,
           DeriveMacros,
           Diagnosis,
           Documentation,
           Environment,
           ErrorHandling,
           Exploration,
           FileHandling,
           Filesystem,
           FunctionLikeMacros,
           Interactive,
           Learning,
           Macros,
           Math,
           Performance,
           ProcMacros,
           Profiling,
           Prototype,
           Recreational,
           Reference,
           Resilience,
           Styling,
           Technique,
           Testing,
           ThagFrontEnds,
           Timing,
           Tools,
           TraitImplementation,
           TypeIdentification,
           Unsafe,
           Validation,
       }

       /// Returns a vector of all valid category names as strings.
       ///
       /// This function is automatically generated by the `category_enum` macro and provides
       /// a complete list of categories, making it convenient for validation, UI prompts, or filtering.
       ///
       /// # Example
       ///
       /// ```rust
       /// use demo_proc_macros::category_enum;
       ///
       /// category_enum! {}
       ///
       /// let categories = Category::all_categories();
       /// assert_eq!(categories, vec![
       ///     "ast",
       ///     "cli",
       ///     "repl",
       ///     "async",
       ///     "attribute_macros",
       ///     "attribute_parsing",
       ///     "automation",
       ///     "basic",
       ///     "benchmark",
       ///     "big_numbers",
       ///     "builder_pattern",
       ///     "caching",
       ///     "color",
       ///     "compile_time",
       ///     "configuration",
       ///     "crates",
       ///     "demo",
       ///     "derive_macros",
       ///     "diagnosis",
       ///     "documentation",
       ///     "environment",
       ///     "error_handling",
       ///     "exploration",
       ///     "file_handling",
       ///     "filesystem",
       ///     "function_like_macros",
       ///     "interactive",
       ///     "learning",
       ///     "macros",
       ///     "math",
       ///     "performance",
       ///     "proc_macros",
       ///     "profiling",
       ///     "prototype",
       ///     "recreational",
       ///     "reference",
       ///     "resilience",
       ///     "styling",
       ///     "technique",
       ///     "testing",
       ///     "thag_front_ends",
       ///     "timing",
       ///     "tools",
       ///     "trait_implementation",
       ///     "type_identification",
       ///     "unsafe",
       ///     "validation",
       /// ]);
       /// ```
        pub fn all_categories() -> Vec<String> {
            let v = lazy_static_var!(Vec<String>, {
                Category::iter()
                    .map(|variant| variant.to_string())
                    .collect::<Vec<String>>()
            });
            v.clone()
        }
    };
    TokenStream::from(expanded)
}
