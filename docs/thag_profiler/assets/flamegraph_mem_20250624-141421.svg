<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="430" onload="init(evt)" viewBox="0 0 1200 430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eef2ee" offset="5%"/><stop stop-color="#e0ffe0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.5; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="430" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Memory Profile Flamegraph (Aggregated)</text><text id="subtitle" x="50.0000%" y="48.00">document_pipeline_profile_minimal-20250624-141421-memory.folded  Started: 2025-06-24 14:14:21  Total Bytes Allocated: 9,972 Peak: 9,972</text><text id="details" fill="rgb(0,0,0)" x="10" y="413.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="413.00"> </text><svg id="frames" x="10" width="1180" total_samples="9972"><g><title>async::document_pipeline_profile_minimal::fetch_document (1,476 bytes, 14.80%)</title><rect x="8.1829%" y="317" width="14.8014%" height="15" fill="rgb(0,196,0)" fg:x="816" fg:w="1476"/><text x="8.4329%" y="327.50">async::document_pipelin..</text></g><g><title>document_pipeline_profile_minimal::Document::new (720 bytes, 7.22%)</title><rect x="15.7641%" y="301" width="7.2202%" height="15" fill="rgb(0,212,0)" fg:x="1572" fg:w="720"/><text x="16.0141%" y="311.50">document_p..</text></g><g><title>document_pipeline_profile_minimal::Document::calculate_sentiment (720 bytes, 7.22%)</title><rect x="25.3911%" y="301" width="7.2202%" height="15" fill="rgb(0,239,176)" fg:x="2532" fg:w="720"/><text x="25.6411%" y="311.50">document_p..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (312 bytes, 3.13%)</title><rect x="32.6113%" y="285" width="3.1288%" height="15" fill="rgb(0,195,194)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="295.50">all..</text></g><g><title>alloc::str::convert_while_ascii (312 bytes, 3.13%)</title><rect x="32.6113%" y="269" width="3.1288%" height="15" fill="rgb(0,222,62)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="279.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (312 bytes, 3.13%)</title><rect x="32.6113%" y="253" width="3.1288%" height="15" fill="rgb(0,190,116)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="263.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (312 bytes, 3.13%)</title><rect x="32.6113%" y="237" width="3.1288%" height="15" fill="rgb(0,233,146)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="247.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (312 bytes, 3.13%)</title><rect x="32.6113%" y="221" width="3.1288%" height="15" fill="rgb(0,220,21)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="231.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (312 bytes, 3.13%)</title><rect x="32.6113%" y="205" width="3.1288%" height="15" fill="rgb(0,213,28)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="215.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (312 bytes, 3.13%)</title><rect x="32.6113%" y="189" width="3.1288%" height="15" fill="rgb(0,207,111)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="199.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (312 bytes, 3.13%)</title><rect x="32.6113%" y="173" width="3.1288%" height="15" fill="rgb(0,229,208)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="183.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (312 bytes, 3.13%)</title><rect x="32.6113%" y="157" width="3.1288%" height="15" fill="rgb(0,216,177)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="167.50">all..</text></g><g><title>alloc::alloc::alloc (312 bytes, 3.13%)</title><rect x="32.6113%" y="141" width="3.1288%" height="15" fill="rgb(0,224,18)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="151.50">all..</text></g><g><title>__rust_alloc (312 bytes, 3.13%)</title><rect x="32.6113%" y="125" width="3.1288%" height="15" fill="rgb(0,225,171)" fg:x="3252" fg:w="312"/><text x="32.8613%" y="135.50">__r..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (576 bytes, 5.78%)</title><rect x="35.7401%" y="285" width="5.7762%" height="15" fill="rgb(0,202,189)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="295.50">core::i..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (576 bytes, 5.78%)</title><rect x="35.7401%" y="269" width="5.7762%" height="15" fill="rgb(0,225,66)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="279.50">&lt;alloc:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (576 bytes, 5.78%)</title><rect x="35.7401%" y="253" width="5.7762%" height="15" fill="rgb(0,232,18)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="263.50">core::i..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (576 bytes, 5.78%)</title><rect x="35.7401%" y="237" width="5.7762%" height="15" fill="rgb(0,228,28)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="247.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (576 bytes, 5.78%)</title><rect x="35.7401%" y="221" width="5.7762%" height="15" fill="rgb(0,233,183)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="231.50">core::i..</text></g><g><title>core::iter::adapters::filter::filter_fold (576 bytes, 5.78%)</title><rect x="35.7401%" y="205" width="5.7762%" height="15" fill="rgb(0,195,24)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="215.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (576 bytes, 5.78%)</title><rect x="35.7401%" y="189" width="5.7762%" height="15" fill="rgb(0,214,30)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="199.50">core::i..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (576 bytes, 5.78%)</title><rect x="35.7401%" y="173" width="5.7762%" height="15" fill="rgb(0,215,167)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="183.50">&lt;alloc:..</text></g><g><title>alloc::string::String::push (576 bytes, 5.78%)</title><rect x="35.7401%" y="157" width="5.7762%" height="15" fill="rgb(0,225,4)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="167.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (576 bytes, 5.78%)</title><rect x="35.7401%" y="141" width="5.7762%" height="15" fill="rgb(0,228,17)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="151.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (576 bytes, 5.78%)</title><rect x="35.7401%" y="125" width="5.7762%" height="15" fill="rgb(0,231,119)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="135.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (576 bytes, 5.78%)</title><rect x="35.7401%" y="109" width="5.7762%" height="15" fill="rgb(0,216,28)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="119.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (576 bytes, 5.78%)</title><rect x="35.7401%" y="93" width="5.7762%" height="15" fill="rgb(0,238,102)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="103.50">alloc::..</text></g><g><title>alloc::raw_vec::finish_grow (576 bytes, 5.78%)</title><rect x="35.7401%" y="77" width="5.7762%" height="15" fill="rgb(0,205,146)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="87.50">alloc::..</text></g><g><title>__rust_alloc (576 bytes, 5.78%)</title><rect x="35.7401%" y="61" width="5.7762%" height="15" fill="rgb(0,234,135)" fg:x="3564" fg:w="576"/><text x="35.9901%" y="71.50">__rust_..</text></g><g><title>all (9,972 bytes, 100%)</title><rect x="0.0000%" y="381" width="100.0000%" height="15" fill="rgb(0,234,32)" fg:x="0" fg:w="9972"/><text x="0.2500%" y="391.50"></text></g><g><title>async::document_pipeline_profile_minimal::main (9,972 bytes, 100.00%)</title><rect x="0.0000%" y="365" width="100.0000%" height="15" fill="rgb(0,212,94)" fg:x="0" fg:w="9972"/><text x="0.2500%" y="375.50">async::document_pipeline_profile_minimal::main</text></g><g><title>async::document_pipeline_profile_minimal::run_batch (9,972 bytes, 100.00%)</title><rect x="0.0000%" y="349" width="100.0000%" height="15" fill="rgb(0,198,80)" fg:x="0" fg:w="9972"/><text x="0.2500%" y="359.50">async::document_pipeline_profile_minimal::run_batch</text></g><g><title>async::document_pipeline_profile_minimal::generate_and_process_documents (9,732 bytes, 97.59%)</title><rect x="2.4067%" y="333" width="97.5933%" height="15" fill="rgb(0,207,165)" fg:x="240" fg:w="9732"/><text x="2.6567%" y="343.50">async::document_pipeline_profile_minimal::generate_and_process_documents</text></g><g><title>async::document_pipeline_profile_minimal::process_document (7,680 bytes, 77.02%)</title><rect x="22.9844%" y="317" width="77.0156%" height="15" fill="rgb(0,239,175)" fg:x="2292" fg:w="7680"/><text x="23.2344%" y="327.50">async::document_pipeline_profile_minimal::process_document</text></g><g><title>document_pipeline_profile_minimal::Document::count_words (6,720 bytes, 67.39%)</title><rect x="32.6113%" y="301" width="67.3887%" height="15" fill="rgb(0,224,76)" fg:x="3252" fg:w="6720"/><text x="32.8613%" y="311.50">document_pipeline_profile_minimal::Document::count_words</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="285" width="58.4838%" height="15" fill="rgb(0,226,33)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="295.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="269" width="58.4838%" height="15" fill="rgb(0,239,3)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="279.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="253" width="58.4838%" height="15" fill="rgb(0,226,176)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="263.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="237" width="58.4838%" height="15" fill="rgb(0,216,152)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="247.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="221" width="58.4838%" height="15" fill="rgb(0,236,166)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="231.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="205" width="58.4838%" height="15" fill="rgb(0,225,55)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="215.50">hashbrown::raw::RawTableInner::reserve_rehash_inner</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="189" width="58.4838%" height="15" fill="rgb(0,201,63)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="199.50">hashbrown::raw::RawTableInner::resize_inner</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="173" width="58.4838%" height="15" fill="rgb(0,224,84)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="183.50">hashbrown::raw::RawTableInner::prepare_resize</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="157" width="58.4838%" height="15" fill="rgb(0,226,106)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="167.50">hashbrown::raw::RawTableInner::fallible_with_capacity</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="141" width="58.4838%" height="15" fill="rgb(0,216,189)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="151.50">hashbrown::raw::RawTableInner::new_uninitialized</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="125" width="58.4838%" height="15" fill="rgb(0,217,88)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="135.50">hashbrown::raw::alloc::inner::do_alloc</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="109" width="58.4838%" height="15" fill="rgb(0,194,126)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="119.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate</text></g><g><title>alloc::alloc::Global::alloc_impl (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="93" width="58.4838%" height="15" fill="rgb(0,203,174)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="103.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="77" width="58.4838%" height="15" fill="rgb(0,226,55)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="87.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (5,832 bytes, 58.48%)</title><rect x="41.5162%" y="61" width="58.4838%" height="15" fill="rgb(0,233,24)" fg:x="4140" fg:w="5832"/><text x="41.7662%" y="71.50">__rust_alloc</text></g></svg></svg>